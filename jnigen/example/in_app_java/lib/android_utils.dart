// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: file_names
// ignore_for_file: unused_import
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("android_utils");

/// from: com.example.in_app_java.AndroidUtils
class AndroidUtils extends jni.JniObject {
  AndroidUtils.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "AndroidUtils__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  AndroidUtils() : super.fromRef(_ctor().object);

  static final _showToast = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("AndroidUtils__showToast")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: static void showToast(android.app.Activity mainActivity, java.lang.CharSequence text, int duration)
  static void showToast(
          Activity mainActivity, jni.JniObject text, int duration) =>
      _showToast(mainActivity.reference, text.reference, duration).check();
}

/// from: android.app.Activity
class Activity extends jni.JniObject {
  Activity.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int DEFAULT_KEYS_DIALER
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: static public final int DEFAULT_KEYS_DISABLE
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: static public final int DEFAULT_KEYS_SEARCH_GLOBAL
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: static public final int DEFAULT_KEYS_SEARCH_LOCAL
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: static public final int DEFAULT_KEYS_SHORTCUT
  static const DEFAULT_KEYS_SHORTCUT = 2;

  static final _get_FOCUSED_STATE_SET =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "get_Activity__FOCUSED_STATE_SET")
          .asFunction<jni.JniResult Function()>();

  /// from: static protected final int[] FOCUSED_STATE_SET
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JniObject get FOCUSED_STATE_SET =>
      jni.JniObject.fromRef(_get_FOCUSED_STATE_SET().object);

  /// from: static public final int RESULT_CANCELED
  static const RESULT_CANCELED = 0;

  /// from: static public final int RESULT_FIRST_USER
  static const RESULT_FIRST_USER = 1;

  /// from: static public final int RESULT_OK
  static const RESULT_OK = -1;

  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Activity__ctor")
          .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  Activity() : super.fromRef(_ctor().object);

  static final _getIntent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getIntent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getIntent() =>
      jni.JniObject.fromRef(_getIntent(reference).object);

  static final _setIntent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setIntent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setIntent(android.content.Intent intent)
  void setIntent(jni.JniObject intent) =>
      _setIntent(reference, intent.reference).check();

  static final _setLocusContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setLocusContext")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)
  void setLocusContext(jni.JniObject locusId, jni.JniObject bundle) =>
      _setLocusContext(reference, locusId.reference, bundle.reference).check();

  static final _getApplication = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getApplication")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.app.Application getApplication()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getApplication() =>
      jni.JniObject.fromRef(_getApplication(reference).object);

  static final _isChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isChild")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isChild()
  bool isChild() => _isChild(reference).boolean;

  static final _getParent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getParent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.app.Activity getParent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Activity getParent() => Activity.fromRef(_getParent(reference).object);

  static final _getWindowManager = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getWindowManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.WindowManager getWindowManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getWindowManager() =>
      jni.JniObject.fromRef(_getWindowManager(reference).object);

  static final _getWindow = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getWindow")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.Window getWindow()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getWindow() =>
      jni.JniObject.fromRef(_getWindow(reference).object);

  static final _getLoaderManager = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getLoaderManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.LoaderManager getLoaderManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getLoaderManager() =>
      jni.JniObject.fromRef(_getLoaderManager(reference).object);

  static final _getCurrentFocus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getCurrentFocus")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View getCurrentFocus()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getCurrentFocus() =>
      jni.JniObject.fromRef(_getCurrentFocus(reference).object);

  static final _attachBaseContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__attachBaseContext")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void attachBaseContext(android.content.Context context)
  void attachBaseContext(jni.JniObject context) =>
      _attachBaseContext(reference, context.reference).check();

  static final _registerActivityLifecycleCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__registerActivityLifecycleCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void registerActivityLifecycleCallbacks(
          jni.JniObject activityLifecycleCallbacks) =>
      _registerActivityLifecycleCallbacks(
              reference, activityLifecycleCallbacks.reference)
          .check();

  static final _unregisterActivityLifecycleCallbacks = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__unregisterActivityLifecycleCallbacks")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void unregisterActivityLifecycleCallbacks(
          jni.JniObject activityLifecycleCallbacks) =>
      _unregisterActivityLifecycleCallbacks(
              reference, activityLifecycleCallbacks.reference)
          .check();

  static final _onCreate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onCreate(android.os.Bundle bundle)
  void onCreate(jni.JniObject bundle) =>
      _onCreate(reference, bundle.reference).check();

  static final _getSplashScreen = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getSplashScreen")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.window.SplashScreen getSplashScreen()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getSplashScreen() =>
      jni.JniObject.fromRef(_getSplashScreen(reference).object);

  static final _onCreate1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreate1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onCreate1(jni.JniObject bundle, jni.JniObject persistableBundle) =>
      _onCreate1(reference, bundle.reference, persistableBundle.reference)
          .check();

  static final _onRestoreInstanceState = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onRestoreInstanceState")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onRestoreInstanceState(android.os.Bundle bundle)
  void onRestoreInstanceState(jni.JniObject bundle) =>
      _onRestoreInstanceState(reference, bundle.reference).check();

  static final _onRestoreInstanceState1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onRestoreInstanceState1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onRestoreInstanceState1(
          jni.JniObject bundle, jni.JniObject persistableBundle) =>
      _onRestoreInstanceState1(
              reference, bundle.reference, persistableBundle.reference)
          .check();

  static final _onPostCreate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPostCreate")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPostCreate(android.os.Bundle bundle)
  void onPostCreate(jni.JniObject bundle) =>
      _onPostCreate(reference, bundle.reference).check();

  static final _onPostCreate1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPostCreate1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onPostCreate1(jni.JniObject bundle, jni.JniObject persistableBundle) =>
      _onPostCreate1(reference, bundle.reference, persistableBundle.reference)
          .check();

  static final _onStart = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onStart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onStart()
  void onStart() => _onStart(reference).check();

  static final _onRestart = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onRestart")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onRestart()
  void onRestart() => _onRestart(reference).check();

  static final _onStateNotSaved = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onStateNotSaved")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onStateNotSaved()
  void onStateNotSaved() => _onStateNotSaved(reference).check();

  static final _onResume = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onResume")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onResume()
  void onResume() => _onResume(reference).check();

  static final _onPostResume = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onPostResume")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPostResume()
  void onPostResume() => _onPostResume(reference).check();

  static final _onTopResumedActivityChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onTopResumedActivityChanged")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onTopResumedActivityChanged(boolean z)
  void onTopResumedActivityChanged(bool z) =>
      _onTopResumedActivityChanged(reference, z ? 1 : 0).check();

  static final _isVoiceInteraction = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isVoiceInteraction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isVoiceInteraction()
  bool isVoiceInteraction() => _isVoiceInteraction(reference).boolean;

  static final _isVoiceInteractionRoot = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isVoiceInteractionRoot")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isVoiceInteractionRoot()
  bool isVoiceInteractionRoot() => _isVoiceInteractionRoot(reference).boolean;

  static final _getVoiceInteractor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getVoiceInteractor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.VoiceInteractor getVoiceInteractor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getVoiceInteractor() =>
      jni.JniObject.fromRef(_getVoiceInteractor(reference).object);

  static final _isLocalVoiceInteractionSupported = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isLocalVoiceInteractionSupported")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isLocalVoiceInteractionSupported()
  bool isLocalVoiceInteractionSupported() =>
      _isLocalVoiceInteractionSupported(reference).boolean;

  static final _startLocalVoiceInteraction = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__startLocalVoiceInteraction")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startLocalVoiceInteraction(android.os.Bundle bundle)
  void startLocalVoiceInteraction(jni.JniObject bundle) =>
      _startLocalVoiceInteraction(reference, bundle.reference).check();

  static final _onLocalVoiceInteractionStarted = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onLocalVoiceInteractionStarted")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onLocalVoiceInteractionStarted()
  void onLocalVoiceInteractionStarted() =>
      _onLocalVoiceInteractionStarted(reference).check();

  static final _onLocalVoiceInteractionStopped = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onLocalVoiceInteractionStopped")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onLocalVoiceInteractionStopped()
  void onLocalVoiceInteractionStopped() =>
      _onLocalVoiceInteractionStopped(reference).check();

  static final _stopLocalVoiceInteraction = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__stopLocalVoiceInteraction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void stopLocalVoiceInteraction()
  void stopLocalVoiceInteraction() =>
      _stopLocalVoiceInteraction(reference).check();

  static final _onNewIntent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onNewIntent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent(jni.JniObject intent) =>
      _onNewIntent(reference, intent.reference).check();

  static final _onSaveInstanceState = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onSaveInstanceState")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(jni.JniObject bundle) =>
      _onSaveInstanceState(reference, bundle.reference).check();

  static final _onSaveInstanceState1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onSaveInstanceState1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onSaveInstanceState1(
          jni.JniObject bundle, jni.JniObject persistableBundle) =>
      _onSaveInstanceState1(
              reference, bundle.reference, persistableBundle.reference)
          .check();

  static final _onPause = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onPause")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPause()
  void onPause() => _onPause(reference).check();

  static final _onUserLeaveHint = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onUserLeaveHint")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onUserLeaveHint()
  void onUserLeaveHint() => _onUserLeaveHint(reference).check();

  static final _onCreateThumbnail = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateThumbnail")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)
  bool onCreateThumbnail(jni.JniObject bitmap, jni.JniObject canvas) =>
      _onCreateThumbnail(reference, bitmap.reference, canvas.reference).boolean;

  static final _onCreateDescription = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateDescription")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence onCreateDescription()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreateDescription() =>
      jni.JniObject.fromRef(_onCreateDescription(reference).object);

  static final _onProvideAssistData = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onProvideAssistData")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistData(android.os.Bundle bundle)
  void onProvideAssistData(jni.JniObject bundle) =>
      _onProvideAssistData(reference, bundle.reference).check();

  static final _onProvideAssistContent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onProvideAssistContent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistContent(android.app.assist.AssistContent assistContent)
  void onProvideAssistContent(jni.JniObject assistContent) =>
      _onProvideAssistContent(reference, assistContent.reference).check();

  static final _onGetDirectActions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onGetDirectActions")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onGetDirectActions(
          jni.JniObject cancellationSignal, jni.JniObject consumer) =>
      _onGetDirectActions(
              reference, cancellationSignal.reference, consumer.reference)
          .check();

  static final _onPerformDirectAction = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPerformDirectAction")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onPerformDirectAction(jni.JniString string, jni.JniObject bundle,
          jni.JniObject cancellationSignal, jni.JniObject consumer) =>
      _onPerformDirectAction(reference, string.reference, bundle.reference,
              cancellationSignal.reference, consumer.reference)
          .check();

  static final _requestShowKeyboardShortcuts = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__requestShowKeyboardShortcuts")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final void requestShowKeyboardShortcuts()
  void requestShowKeyboardShortcuts() =>
      _requestShowKeyboardShortcuts(reference).check();

  static final _dismissKeyboardShortcutsHelper = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__dismissKeyboardShortcutsHelper")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final void dismissKeyboardShortcutsHelper()
  void dismissKeyboardShortcutsHelper() =>
      _dismissKeyboardShortcutsHelper(reference).check();

  static final _onProvideKeyboardShortcuts = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onProvideKeyboardShortcuts")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)
  void onProvideKeyboardShortcuts(
          jni.JniObject list, jni.JniObject menu, int i) =>
      _onProvideKeyboardShortcuts(reference, list.reference, menu.reference, i)
          .check();

  static final _showAssist = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__showAssist")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean showAssist(android.os.Bundle bundle)
  bool showAssist(jni.JniObject bundle) =>
      _showAssist(reference, bundle.reference).boolean;

  static final _onStop = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onStop")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onStop()
  void onStop() => _onStop(reference).check();

  static final _onDestroy = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onDestroy")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: protected void onDestroy()
  void onDestroy() => _onDestroy(reference).check();

  static final _reportFullyDrawn = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__reportFullyDrawn")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void reportFullyDrawn()
  void reportFullyDrawn() => _reportFullyDrawn(reference).check();

  static final _onMultiWindowModeChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
                  ffi.Pointer<ffi.Void>)>>("Activity__onMultiWindowModeChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)
  void onMultiWindowModeChanged(bool z, jni.JniObject configuration) =>
      _onMultiWindowModeChanged(reference, z ? 1 : 0, configuration.reference)
          .check();

  static final _onMultiWindowModeChanged1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onMultiWindowModeChanged1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onMultiWindowModeChanged(boolean z)
  void onMultiWindowModeChanged1(bool z) =>
      _onMultiWindowModeChanged1(reference, z ? 1 : 0).check();

  static final _isInMultiWindowMode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isInMultiWindowMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isInMultiWindowMode()
  bool isInMultiWindowMode() => _isInMultiWindowMode(reference).boolean;

  static final _onPictureInPictureModeChanged = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__onPictureInPictureModeChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)
  void onPictureInPictureModeChanged(bool z, jni.JniObject configuration) =>
      _onPictureInPictureModeChanged(
              reference, z ? 1 : 0, configuration.reference)
          .check();

  static final _onPictureInPictureUiStateChanged = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onPictureInPictureUiStateChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)
  void onPictureInPictureUiStateChanged(
          jni.JniObject pictureInPictureUiState) =>
      _onPictureInPictureUiStateChanged(
              reference, pictureInPictureUiState.reference)
          .check();

  static final _onPictureInPictureModeChanged1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onPictureInPictureModeChanged1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onPictureInPictureModeChanged(boolean z)
  void onPictureInPictureModeChanged1(bool z) =>
      _onPictureInPictureModeChanged1(reference, z ? 1 : 0).check();

  static final _isInPictureInPictureMode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isInPictureInPictureMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isInPictureInPictureMode()
  bool isInPictureInPictureMode() =>
      _isInPictureInPictureMode(reference).boolean;

  static final _enterPictureInPictureMode = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__enterPictureInPictureMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void enterPictureInPictureMode()
  void enterPictureInPictureMode() =>
      _enterPictureInPictureMode(reference).check();

  static final _enterPictureInPictureMode1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__enterPictureInPictureMode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)
  bool enterPictureInPictureMode1(jni.JniObject pictureInPictureParams) =>
      _enterPictureInPictureMode1(reference, pictureInPictureParams.reference)
          .boolean;

  static final _setPictureInPictureParams = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setPictureInPictureParams")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)
  void setPictureInPictureParams(jni.JniObject pictureInPictureParams) =>
      _setPictureInPictureParams(reference, pictureInPictureParams.reference)
          .check();

  static final _getMaxNumPictureInPictureActions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getMaxNumPictureInPictureActions")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getMaxNumPictureInPictureActions()
  int getMaxNumPictureInPictureActions() =>
      _getMaxNumPictureInPictureActions(reference).integer;

  static final _onPictureInPictureRequested = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onPictureInPictureRequested")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPictureInPictureRequested()
  bool onPictureInPictureRequested() =>
      _onPictureInPictureRequested(reference).boolean;

  static final _onConfigurationChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onConfigurationChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(jni.JniObject configuration) =>
      _onConfigurationChanged(reference, configuration.reference).check();

  static final _getChangingConfigurations = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getChangingConfigurations")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() =>
      _getChangingConfigurations(reference).integer;

  static final _getLastNonConfigurationInstance = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getLastNonConfigurationInstance")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getLastNonConfigurationInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getLastNonConfigurationInstance() =>
      jni.JniObject.fromRef(_getLastNonConfigurationInstance(reference).object);

  static final _onRetainNonConfigurationInstance = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__onRetainNonConfigurationInstance")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object onRetainNonConfigurationInstance()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onRetainNonConfigurationInstance() => jni.JniObject.fromRef(
      _onRetainNonConfigurationInstance(reference).object);

  static final _onLowMemory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onLowMemory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onLowMemory()
  void onLowMemory() => _onLowMemory(reference).check();

  static final _onTrimMemory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__onTrimMemory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onTrimMemory(int i)
  void onTrimMemory(int i) => _onTrimMemory(reference, i).check();

  static final _getFragmentManager = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getFragmentManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.FragmentManager getFragmentManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getFragmentManager() =>
      jni.JniObject.fromRef(_getFragmentManager(reference).object);

  static final _onAttachFragment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onAttachFragment")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onAttachFragment(android.app.Fragment fragment)
  void onAttachFragment(jni.JniObject fragment) =>
      _onAttachFragment(reference, fragment.reference).check();

  static final _managedQuery = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__managedQuery")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject managedQuery(
          jni.JniObject uri,
          jni.JniObject strings,
          jni.JniString string,
          jni.JniObject strings1,
          jni.JniString string1) =>
      jni.JniObject.fromRef(_managedQuery(
              reference,
              uri.reference,
              strings.reference,
              string.reference,
              strings1.reference,
              string1.reference)
          .object);

  static final _startManagingCursor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startManagingCursor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startManagingCursor(android.database.Cursor cursor)
  void startManagingCursor(jni.JniObject cursor) =>
      _startManagingCursor(reference, cursor.reference).check();

  static final _stopManagingCursor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__stopManagingCursor")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void stopManagingCursor(android.database.Cursor cursor)
  void stopManagingCursor(jni.JniObject cursor) =>
      _stopManagingCursor(reference, cursor.reference).check();

  static final _findViewById = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__findViewById")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.View findViewById(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject findViewById(int i) =>
      jni.JniObject.fromRef(_findViewById(reference, i).object);

  static final _requireViewById = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__requireViewById")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final android.view.View requireViewById(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject requireViewById(int i) =>
      jni.JniObject.fromRef(_requireViewById(reference, i).object);

  static final _getActionBar = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getActionBar")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.app.ActionBar getActionBar()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getActionBar() =>
      jni.JniObject.fromRef(_getActionBar(reference).object);

  static final _setActionBar = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setActionBar")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setActionBar(android.widget.Toolbar toolbar)
  void setActionBar(jni.JniObject toolbar) =>
      _setActionBar(reference, toolbar.reference).check();

  static final _setContentView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setContentView")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setContentView(int i)
  void setContentView(int i) => _setContentView(reference, i).check();

  static final _setContentView1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setContentView1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view)
  void setContentView1(jni.JniObject view) =>
      _setContentView1(reference, view.reference).check();

  static final _setContentView2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setContentView2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void setContentView2(jni.JniObject view, jni.JniObject layoutParams) =>
      _setContentView2(reference, view.reference, layoutParams.reference)
          .check();

  static final _addContentView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__addContentView")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void addContentView(jni.JniObject view, jni.JniObject layoutParams) =>
      _addContentView(reference, view.reference, layoutParams.reference)
          .check();

  static final _getContentTransitionManager = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__getContentTransitionManager")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.transition.TransitionManager getContentTransitionManager()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getContentTransitionManager() =>
      jni.JniObject.fromRef(_getContentTransitionManager(reference).object);

  static final _setContentTransitionManager = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setContentTransitionManager")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentTransitionManager(android.transition.TransitionManager transitionManager)
  void setContentTransitionManager(jni.JniObject transitionManager) =>
      _setContentTransitionManager(reference, transitionManager.reference)
          .check();

  static final _getContentScene = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getContentScene")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.transition.Scene getContentScene()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getContentScene() =>
      jni.JniObject.fromRef(_getContentScene(reference).object);

  static final _setFinishOnTouchOutside = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setFinishOnTouchOutside")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setFinishOnTouchOutside(boolean z)
  void setFinishOnTouchOutside(bool z) =>
      _setFinishOnTouchOutside(reference, z ? 1 : 0).check();

  static final _setDefaultKeyMode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setDefaultKeyMode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setDefaultKeyMode(int i)
  void setDefaultKeyMode(int i) => _setDefaultKeyMode(reference, i).check();

  static final _onKeyDown = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyDown")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(int i, jni.JniObject keyEvent) =>
      _onKeyDown(reference, i, keyEvent.reference).boolean;

  static final _onKeyLongPress = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyLongPress")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)
  bool onKeyLongPress(int i, jni.JniObject keyEvent) =>
      _onKeyLongPress(reference, i, keyEvent.reference).boolean;

  static final _onKeyUp = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyUp")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(int i, jni.JniObject keyEvent) =>
      _onKeyUp(reference, i, keyEvent.reference).boolean;

  static final _onKeyMultiple = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>("Activity__onKeyMultiple")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(int i, int i1, jni.JniObject keyEvent) =>
      _onKeyMultiple(reference, i, i1, keyEvent.reference).boolean;

  static final _onBackPressed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onBackPressed")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onBackPressed()
  void onBackPressed() => _onBackPressed(reference).check();

  static final _onKeyShortcut = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onKeyShortcut")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)
  bool onKeyShortcut(int i, jni.JniObject keyEvent) =>
      _onKeyShortcut(reference, i, keyEvent.reference).boolean;

  static final _onTouchEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onTouchEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(jni.JniObject motionEvent) =>
      _onTouchEvent(reference, motionEvent.reference).boolean;

  static final _onTrackballEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onTrackballEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(jni.JniObject motionEvent) =>
      _onTrackballEvent(reference, motionEvent.reference).boolean;

  static final _onGenericMotionEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onGenericMotionEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(jni.JniObject motionEvent) =>
      _onGenericMotionEvent(reference, motionEvent.reference).boolean;

  static final _onUserInteraction = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onUserInteraction")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onUserInteraction()
  void onUserInteraction() => _onUserInteraction(reference).check();

  static final _onWindowAttributesChanged = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onWindowAttributesChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)
  void onWindowAttributesChanged(jni.JniObject layoutParams) =>
      _onWindowAttributesChanged(reference, layoutParams.reference).check();

  static final _onContentChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onContentChanged")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onContentChanged()
  void onContentChanged() => _onContentChanged(reference).check();

  static final _onWindowFocusChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__onWindowFocusChanged")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(bool z) =>
      _onWindowFocusChanged(reference, z ? 1 : 0).check();

  static final _onAttachedToWindow = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onAttachedToWindow")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onAttachedToWindow()
  void onAttachedToWindow() => _onAttachedToWindow(reference).check();

  static final _onDetachedFromWindow = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onDetachedFromWindow")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() => _onDetachedFromWindow(reference).check();

  static final _hasWindowFocus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__hasWindowFocus")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasWindowFocus()
  bool hasWindowFocus() => _hasWindowFocus(reference).boolean;

  static final _dispatchKeyEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchKeyEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(jni.JniObject keyEvent) =>
      _dispatchKeyEvent(reference, keyEvent.reference).boolean;

  static final _dispatchKeyShortcutEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchKeyShortcutEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyShortcutEvent(jni.JniObject keyEvent) =>
      _dispatchKeyShortcutEvent(reference, keyEvent.reference).boolean;

  static final _dispatchTouchEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchTouchEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)
  bool dispatchTouchEvent(jni.JniObject motionEvent) =>
      _dispatchTouchEvent(reference, motionEvent.reference).boolean;

  static final _dispatchTrackballEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dispatchTrackballEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)
  bool dispatchTrackballEvent(jni.JniObject motionEvent) =>
      _dispatchTrackballEvent(reference, motionEvent.reference).boolean;

  static final _dispatchGenericMotionEvent = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__dispatchGenericMotionEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool dispatchGenericMotionEvent(jni.JniObject motionEvent) =>
      _dispatchGenericMotionEvent(reference, motionEvent.reference).boolean;

  static final _dispatchPopulateAccessibilityEvent = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__dispatchPopulateAccessibilityEvent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)
  bool dispatchPopulateAccessibilityEvent(jni.JniObject accessibilityEvent) =>
      _dispatchPopulateAccessibilityEvent(
              reference, accessibilityEvent.reference)
          .boolean;

  static final _onCreatePanelView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onCreatePanelView")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.View onCreatePanelView(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreatePanelView(int i) =>
      jni.JniObject.fromRef(_onCreatePanelView(reference, i).object);

  static final _onCreatePanelMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreatePanelMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreatePanelMenu(int i, android.view.Menu menu)
  bool onCreatePanelMenu(int i, jni.JniObject menu) =>
      _onCreatePanelMenu(reference, i, menu.reference).boolean;

  static final _onPreparePanel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPreparePanel")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)
  bool onPreparePanel(int i, jni.JniObject view, jni.JniObject menu) =>
      _onPreparePanel(reference, i, view.reference, menu.reference).boolean;

  static final _onMenuOpened = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onMenuOpened")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuOpened(int i, android.view.Menu menu)
  bool onMenuOpened(int i, jni.JniObject menu) =>
      _onMenuOpened(reference, i, menu.reference).boolean;

  static final _onMenuItemSelected = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onMenuItemSelected")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)
  bool onMenuItemSelected(int i, jni.JniObject menuItem) =>
      _onMenuItemSelected(reference, i, menuItem.reference).boolean;

  static final _onPanelClosed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPanelClosed")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPanelClosed(int i, android.view.Menu menu)
  void onPanelClosed(int i, jni.JniObject menu) =>
      _onPanelClosed(reference, i, menu.reference).check();

  static final _invalidateOptionsMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__invalidateOptionsMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void invalidateOptionsMenu()
  void invalidateOptionsMenu() => _invalidateOptionsMenu(reference).check();

  static final _onCreateOptionsMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateOptionsMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateOptionsMenu(android.view.Menu menu)
  bool onCreateOptionsMenu(jni.JniObject menu) =>
      _onCreateOptionsMenu(reference, menu.reference).boolean;

  static final _onPrepareOptionsMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPrepareOptionsMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(jni.JniObject menu) =>
      _onPrepareOptionsMenu(reference, menu.reference).boolean;

  static final _onOptionsItemSelected = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onOptionsItemSelected")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem menuItem)
  bool onOptionsItemSelected(jni.JniObject menuItem) =>
      _onOptionsItemSelected(reference, menuItem.reference).boolean;

  static final _onNavigateUp = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onNavigateUp")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onNavigateUp()
  bool onNavigateUp() => _onNavigateUp(reference).boolean;

  static final _onNavigateUpFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onNavigateUpFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onNavigateUpFromChild(android.app.Activity activity)
  bool onNavigateUpFromChild(Activity activity) =>
      _onNavigateUpFromChild(reference, activity.reference).boolean;

  static final _onCreateNavigateUpTaskStack = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onCreateNavigateUpTaskStack")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onCreateNavigateUpTaskStack(jni.JniObject taskStackBuilder) =>
      _onCreateNavigateUpTaskStack(reference, taskStackBuilder.reference)
          .check();

  static final _onPrepareNavigateUpTaskStack = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onPrepareNavigateUpTaskStack")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onPrepareNavigateUpTaskStack(jni.JniObject taskStackBuilder) =>
      _onPrepareNavigateUpTaskStack(reference, taskStackBuilder.reference)
          .check();

  static final _onOptionsMenuClosed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onOptionsMenuClosed")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onOptionsMenuClosed(android.view.Menu menu)
  void onOptionsMenuClosed(jni.JniObject menu) =>
      _onOptionsMenuClosed(reference, menu.reference).check();

  static final _openOptionsMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__openOptionsMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void openOptionsMenu()
  void openOptionsMenu() => _openOptionsMenu(reference).check();

  static final _closeOptionsMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__closeOptionsMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeOptionsMenu()
  void closeOptionsMenu() => _closeOptionsMenu(reference).check();

  static final _onCreateContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateContextMenu")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)
  void onCreateContextMenu(jni.JniObject contextMenu, jni.JniObject view,
          jni.JniObject contextMenuInfo) =>
      _onCreateContextMenu(reference, contextMenu.reference, view.reference,
              contextMenuInfo.reference)
          .check();

  static final _registerForContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__registerForContextMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerForContextMenu(android.view.View view)
  void registerForContextMenu(jni.JniObject view) =>
      _registerForContextMenu(reference, view.reference).check();

  static final _unregisterForContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__unregisterForContextMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterForContextMenu(android.view.View view)
  void unregisterForContextMenu(jni.JniObject view) =>
      _unregisterForContextMenu(reference, view.reference).check();

  static final _openContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__openContextMenu")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void openContextMenu(android.view.View view)
  void openContextMenu(jni.JniObject view) =>
      _openContextMenu(reference, view.reference).check();

  static final _closeContextMenu = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__closeContextMenu")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void closeContextMenu()
  void closeContextMenu() => _closeContextMenu(reference).check();

  static final _onContextItemSelected = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onContextItemSelected")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onContextItemSelected(android.view.MenuItem menuItem)
  bool onContextItemSelected(jni.JniObject menuItem) =>
      _onContextItemSelected(reference, menuItem.reference).boolean;

  static final _onContextMenuClosed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onContextMenuClosed")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onContextMenuClosed(android.view.Menu menu)
  void onContextMenuClosed(jni.JniObject menu) =>
      _onContextMenuClosed(reference, menu.reference).check();

  static final _onCreateDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onCreateDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: protected android.app.Dialog onCreateDialog(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreateDialog(int i) =>
      jni.JniObject.fromRef(_onCreateDialog(reference, i).object);

  static final _onCreateDialog1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateDialog1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected android.app.Dialog onCreateDialog(int i, android.os.Bundle bundle)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreateDialog1(int i, jni.JniObject bundle) =>
      jni.JniObject.fromRef(
          _onCreateDialog1(reference, i, bundle.reference).object);

  static final _onPrepareDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPrepareDialog")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog)
  void onPrepareDialog(int i, jni.JniObject dialog) =>
      _onPrepareDialog(reference, i, dialog.reference).check();

  static final _onPrepareDialog1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onPrepareDialog1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog, android.os.Bundle bundle)
  void onPrepareDialog1(int i, jni.JniObject dialog, jni.JniObject bundle) =>
      _onPrepareDialog1(reference, i, dialog.reference, bundle.reference)
          .check();

  static final _showDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__showDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void showDialog(int i)
  void showDialog(int i) => _showDialog(reference, i).check();

  static final _showDialog1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__showDialog1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean showDialog(int i, android.os.Bundle bundle)
  bool showDialog1(int i, jni.JniObject bundle) =>
      _showDialog1(reference, i, bundle.reference).boolean;

  static final _dismissDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__dismissDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void dismissDialog(int i)
  void dismissDialog(int i) => _dismissDialog(reference, i).check();

  static final _removeDialog = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__removeDialog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void removeDialog(int i)
  void removeDialog(int i) => _removeDialog(reference, i).check();

  static final _onSearchRequested = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onSearchRequested")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onSearchRequested(android.view.SearchEvent searchEvent)
  bool onSearchRequested(jni.JniObject searchEvent) =>
      _onSearchRequested(reference, searchEvent.reference).boolean;

  static final _onSearchRequested1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onSearchRequested1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onSearchRequested()
  bool onSearchRequested1() => _onSearchRequested1(reference).boolean;

  static final _getSearchEvent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getSearchEvent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.view.SearchEvent getSearchEvent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getSearchEvent() =>
      jni.JniObject.fromRef(_getSearchEvent(reference).object);

  static final _startSearch = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__startSearch")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)
  void startSearch(
          jni.JniString string, bool z, jni.JniObject bundle, bool z1) =>
      _startSearch(reference, string.reference, z ? 1 : 0, bundle.reference,
              z1 ? 1 : 0)
          .check();

  static final _triggerSearch = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__triggerSearch")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void triggerSearch(java.lang.String string, android.os.Bundle bundle)
  void triggerSearch(jni.JniString string, jni.JniObject bundle) =>
      _triggerSearch(reference, string.reference, bundle.reference).check();

  static final _takeKeyEvents = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Activity__takeKeyEvents")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void takeKeyEvents(boolean z)
  void takeKeyEvents(bool z) => _takeKeyEvents(reference, z ? 1 : 0).check();

  static final _requestWindowFeature = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__requestWindowFeature")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final boolean requestWindowFeature(int i)
  bool requestWindowFeature(int i) =>
      _requestWindowFeature(reference, i).boolean;

  static final _setFeatureDrawableResource = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Activity__setFeatureDrawableResource")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final void setFeatureDrawableResource(int i, int i1)
  void setFeatureDrawableResource(int i, int i1) =>
      _setFeatureDrawableResource(reference, i, i1).check();

  static final _setFeatureDrawableUri = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__setFeatureDrawableUri")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawableUri(int i, android.net.Uri uri)
  void setFeatureDrawableUri(int i, jni.JniObject uri) =>
      _setFeatureDrawableUri(reference, i, uri.reference).check();

  static final _setFeatureDrawable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__setFeatureDrawable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)
  void setFeatureDrawable(int i, jni.JniObject drawable) =>
      _setFeatureDrawable(reference, i, drawable.reference).check();

  static final _setFeatureDrawableAlpha = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Activity__setFeatureDrawableAlpha")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final void setFeatureDrawableAlpha(int i, int i1)
  void setFeatureDrawableAlpha(int i, int i1) =>
      _setFeatureDrawableAlpha(reference, i, i1).check();

  static final _getLayoutInflater = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getLayoutInflater")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.LayoutInflater getLayoutInflater()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getLayoutInflater() =>
      jni.JniObject.fromRef(_getLayoutInflater(reference).object);

  static final _getMenuInflater = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getMenuInflater")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.MenuInflater getMenuInflater()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getMenuInflater() =>
      jni.JniObject.fromRef(_getMenuInflater(reference).object);

  static final _setTheme = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setTheme")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTheme(int i)
  void setTheme(int i) => _setTheme(reference, i).check();

  static final _onApplyThemeResource = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Uint8)>>("Activity__onApplyThemeResource")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: protected void onApplyThemeResource(android.content.res.Resources$Theme theme, int i, boolean z)
  void onApplyThemeResource(jni.JniObject theme, int i, bool z) =>
      _onApplyThemeResource(reference, theme.reference, i, z ? 1 : 0).check();

  static final _requestPermissions = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__requestPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void requestPermissions(java.lang.String[] strings, int i)
  void requestPermissions(jni.JniObject strings, int i) =>
      _requestPermissions(reference, strings.reference, i).check();

  static final _onRequestPermissionsResult = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onRequestPermissionsResult")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)
  void onRequestPermissionsResult(
          int i, jni.JniObject strings, jni.JniObject is0) =>
      _onRequestPermissionsResult(
              reference, i, strings.reference, is0.reference)
          .check();

  static final _shouldShowRequestPermissionRationale = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__shouldShowRequestPermissionRationale")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldShowRequestPermissionRationale(java.lang.String string)
  bool shouldShowRequestPermissionRationale(jni.JniString string) =>
      _shouldShowRequestPermissionRationale(reference, string.reference)
          .boolean;

  static final _startActivityForResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityForResult")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i)
  void startActivityForResult(jni.JniObject intent, int i) =>
      _startActivityForResult(reference, intent.reference, i).check();

  static final _startActivityForResult1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivityForResult1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityForResult1(
          jni.JniObject intent, int i, jni.JniObject bundle) =>
      _startActivityForResult1(reference, intent.reference, i, bundle.reference)
          .check();

  static final _isActivityTransitionRunning = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__isActivityTransitionRunning")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isActivityTransitionRunning()
  bool isActivityTransitionRunning() =>
      _isActivityTransitionRunning(reference).boolean;

  static final _startIntentSenderForResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Activity__startIntentSenderForResult")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderForResult(jni.JniObject intentSender, int i,
          jni.JniObject intent, int i1, int i2, int i3) =>
      _startIntentSenderForResult(reference, intentSender.reference, i,
              intent.reference, i1, i2, i3)
          .check();

  static final _startIntentSenderForResult1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__startIntentSenderForResult1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderForResult1(jni.JniObject intentSender, int i,
          jni.JniObject intent, int i1, int i2, int i3, jni.JniObject bundle) =>
      _startIntentSenderForResult1(reference, intentSender.reference, i,
              intent.reference, i1, i2, i3, bundle.reference)
          .check();

  static final _startActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(jni.JniObject intent) =>
      _startActivity(reference, intent.reference).check();

  static final _startActivity1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivity1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(jni.JniObject intent, jni.JniObject bundle) =>
      _startActivity1(reference, intent.reference, bundle.reference).check();

  static final _startActivities = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivities")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(jni.JniObject intents) =>
      _startActivities(reference, intents.reference).check();

  static final _startActivities1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivities1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(jni.JniObject intents, jni.JniObject bundle) =>
      _startActivities1(reference, intents.reference, bundle.reference).check();

  static final _startIntentSender = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Activity__startIntentSender")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(jni.JniObject intentSender, jni.JniObject intent,
          int i, int i1, int i2) =>
      _startIntentSender(
              reference, intentSender.reference, intent.reference, i, i1, i2)
          .check();

  static final _startIntentSender1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startIntentSender1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(jni.JniObject intentSender, jni.JniObject intent,
          int i, int i1, int i2, jni.JniObject bundle) =>
      _startIntentSender1(reference, intentSender.reference, intent.reference,
              i, i1, i2, bundle.reference)
          .check();

  static final _startActivityIfNeeded = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityIfNeeded")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i)
  bool startActivityIfNeeded(jni.JniObject intent, int i) =>
      _startActivityIfNeeded(reference, intent.reference, i).boolean;

  static final _startActivityIfNeeded1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivityIfNeeded1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)
  bool startActivityIfNeeded1(
          jni.JniObject intent, int i, jni.JniObject bundle) =>
      _startActivityIfNeeded1(reference, intent.reference, i, bundle.reference)
          .boolean;

  static final _startNextMatchingActivity = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__startNextMatchingActivity")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent)
  bool startNextMatchingActivity(jni.JniObject intent) =>
      _startNextMatchingActivity(reference, intent.reference).boolean;

  static final _startNextMatchingActivity1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__startNextMatchingActivity1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)
  bool startNextMatchingActivity1(jni.JniObject intent, jni.JniObject bundle) =>
      _startNextMatchingActivity1(reference, intent.reference, bundle.reference)
          .boolean;

  static final _startActivityFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityFromChild")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)
  void startActivityFromChild(Activity activity, jni.JniObject intent, int i) =>
      _startActivityFromChild(
              reference, activity.reference, intent.reference, i)
          .check();

  static final _startActivityFromChild1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActivityFromChild1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromChild1(Activity activity, jni.JniObject intent, int i,
          jni.JniObject bundle) =>
      _startActivityFromChild1(reference, activity.reference, intent.reference,
              i, bundle.reference)
          .check();

  static final _startActivityFromFragment = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActivityFromFragment")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)
  void startActivityFromFragment(
          jni.JniObject fragment, jni.JniObject intent, int i) =>
      _startActivityFromFragment(
              reference, fragment.reference, intent.reference, i)
          .check();

  static final _startActivityFromFragment1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__startActivityFromFragment1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromFragment1(jni.JniObject fragment, jni.JniObject intent,
          int i, jni.JniObject bundle) =>
      _startActivityFromFragment1(reference, fragment.reference,
              intent.reference, i, bundle.reference)
          .check();

  static final _startIntentSenderFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Int32)>>("Activity__startIntentSenderFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderFromChild(Activity activity, jni.JniObject intentSender,
          int i, jni.JniObject intent, int i1, int i2, int i3) =>
      _startIntentSenderFromChild(reference, activity.reference,
              intentSender.reference, i, intent.reference, i1, i2, i3)
          .check();

  static final _startIntentSenderFromChild1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Int32,
                      ffi.Pointer<ffi.Void>)>>(
          "Activity__startIntentSenderFromChild1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderFromChild1(
          Activity activity,
          jni.JniObject intentSender,
          int i,
          jni.JniObject intent,
          int i1,
          int i2,
          int i3,
          jni.JniObject bundle) =>
      _startIntentSenderFromChild1(
              reference,
              activity.reference,
              intentSender.reference,
              i,
              intent.reference,
              i1,
              i2,
              i3,
              bundle.reference)
          .check();

  static final _overridePendingTransition = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("Activity__overridePendingTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void overridePendingTransition(int i, int i1)
  void overridePendingTransition(int i, int i1) =>
      _overridePendingTransition(reference, i, i1).check();

  static final _setResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setResult")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setResult(int i)
  void setResult(int i) => _setResult(reference, i).check();

  static final _setResult1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__setResult1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResult(int i, android.content.Intent intent)
  void setResult1(int i, jni.JniObject intent) =>
      _setResult1(reference, i, intent.reference).check();

  static final _getReferrer = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getReferrer")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri getReferrer()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getReferrer() =>
      jni.JniObject.fromRef(_getReferrer(reference).object);

  static final _onProvideReferrer = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onProvideReferrer")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.net.Uri onProvideReferrer()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onProvideReferrer() =>
      jni.JniObject.fromRef(_onProvideReferrer(reference).object);

  static final _getCallingPackage = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getCallingPackage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getCallingPackage()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getCallingPackage() =>
      jni.JniString.fromRef(_getCallingPackage(reference).object);

  static final _getCallingActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getCallingActivity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getCallingActivity()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getCallingActivity() =>
      jni.JniObject.fromRef(_getCallingActivity(reference).object);

  static final _setVisible = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Activity__setVisible")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setVisible(boolean z)
  void setVisible(bool z) => _setVisible(reference, z ? 1 : 0).check();

  static final _isFinishing = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isFinishing")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isFinishing()
  bool isFinishing() => _isFinishing(reference).boolean;

  static final _isDestroyed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isDestroyed")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isDestroyed()
  bool isDestroyed() => _isDestroyed(reference).boolean;

  static final _isChangingConfigurations = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isChangingConfigurations")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isChangingConfigurations()
  bool isChangingConfigurations() =>
      _isChangingConfigurations(reference).boolean;

  static final _recreate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__recreate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void recreate()
  void recreate() => _recreate(reference).check();

  static final _finish = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__finish")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finish()
  void finish() => _finish(reference).check();

  static final _finishAffinity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__finishAffinity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishAffinity()
  void finishAffinity() => _finishAffinity(reference).check();

  static final _finishFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__finishFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void finishFromChild(android.app.Activity activity)
  void finishFromChild(Activity activity) =>
      _finishFromChild(reference, activity.reference).check();

  static final _finishAfterTransition = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__finishAfterTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishAfterTransition()
  void finishAfterTransition() => _finishAfterTransition(reference).check();

  static final _finishActivity = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__finishActivity")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void finishActivity(int i)
  void finishActivity(int i) => _finishActivity(reference, i).check();

  static final _finishActivityFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__finishActivityFromChild")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void finishActivityFromChild(android.app.Activity activity, int i)
  void finishActivityFromChild(Activity activity, int i) =>
      _finishActivityFromChild(reference, activity.reference, i).check();

  static final _finishAndRemoveTask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__finishAndRemoveTask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void finishAndRemoveTask()
  void finishAndRemoveTask() => _finishAndRemoveTask(reference).check();

  static final _releaseInstance = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__releaseInstance")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean releaseInstance()
  bool releaseInstance() => _releaseInstance(reference).boolean;

  static final _onActivityResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActivityResult")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(int i, int i1, jni.JniObject intent) =>
      _onActivityResult(reference, i, i1, intent.reference).check();

  static final _onActivityReenter = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActivityReenter")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActivityReenter(int i, android.content.Intent intent)
  void onActivityReenter(int i, jni.JniObject intent) =>
      _onActivityReenter(reference, i, intent.reference).check();

  static final _createPendingResult = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__createPendingResult")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject createPendingResult(int i, jni.JniObject intent, int i1) =>
      jni.JniObject.fromRef(
          _createPendingResult(reference, i, intent.reference, i1).object);

  static final _setRequestedOrientation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setRequestedOrientation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setRequestedOrientation(int i)
  void setRequestedOrientation(int i) =>
      _setRequestedOrientation(reference, i).check();

  static final _getRequestedOrientation = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getRequestedOrientation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getRequestedOrientation()
  int getRequestedOrientation() => _getRequestedOrientation(reference).integer;

  static final _getTaskId = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getTaskId")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTaskId()
  int getTaskId() => _getTaskId(reference).integer;

  static final _isTaskRoot = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isTaskRoot")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isTaskRoot()
  bool isTaskRoot() => _isTaskRoot(reference).boolean;

  static final _moveTaskToBack = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__moveTaskToBack")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean moveTaskToBack(boolean z)
  bool moveTaskToBack(bool z) => _moveTaskToBack(reference, z ? 1 : 0).boolean;

  static final _getLocalClassName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getLocalClassName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getLocalClassName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniString getLocalClassName() =>
      jni.JniString.fromRef(_getLocalClassName(reference).object);

  static final _getComponentName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getComponentName")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getComponentName() =>
      jni.JniObject.fromRef(_getComponentName(reference).object);

  static final _getPreferences = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__getPreferences")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.SharedPreferences getPreferences(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getPreferences(int i) =>
      jni.JniObject.fromRef(_getPreferences(reference, i).object);

  static final _isLaunchedFromBubble = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isLaunchedFromBubble")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isLaunchedFromBubble()
  bool isLaunchedFromBubble() => _isLaunchedFromBubble(reference).boolean;

  static final _getSystemService = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__getSystemService")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getSystemService(jni.JniString string) => jni.JniObject.fromRef(
      _getSystemService(reference, string.reference).object);

  static final _setTitle = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setTitle")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTitle(java.lang.CharSequence charSequence)
  void setTitle(jni.JniObject charSequence) =>
      _setTitle(reference, charSequence.reference).check();

  static final _setTitle1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setTitle1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTitle(int i)
  void setTitle1(int i) => _setTitle1(reference, i).check();

  static final _setTitleColor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setTitleColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTitleColor(int i)
  void setTitleColor(int i) => _setTitleColor(reference, i).check();

  static final _getTitle = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getTitle")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.CharSequence getTitle()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getTitle() =>
      jni.JniObject.fromRef(_getTitle(reference).object);

  static final _getTitleColor = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getTitleColor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int getTitleColor()
  int getTitleColor() => _getTitleColor(reference).integer;

  static final _onTitleChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onTitleChanged")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: protected void onTitleChanged(java.lang.CharSequence charSequence, int i)
  void onTitleChanged(jni.JniObject charSequence, int i) =>
      _onTitleChanged(reference, charSequence.reference, i).check();

  static final _onChildTitleChanged = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onChildTitleChanged")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onChildTitleChanged(android.app.Activity activity, java.lang.CharSequence charSequence)
  void onChildTitleChanged(Activity activity, jni.JniObject charSequence) =>
      _onChildTitleChanged(
              reference, activity.reference, charSequence.reference)
          .check();

  static final _setTaskDescription = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setTaskDescription")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)
  void setTaskDescription(jni.JniObject taskDescription) =>
      _setTaskDescription(reference, taskDescription.reference).check();

  static final _setProgressBarVisibility = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setProgressBarVisibility")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgressBarVisibility(boolean z)
  void setProgressBarVisibility(bool z) =>
      _setProgressBarVisibility(reference, z ? 1 : 0).check();

  static final _setProgressBarIndeterminateVisibility = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "Activity__setProgressBarIndeterminateVisibility")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgressBarIndeterminateVisibility(boolean z)
  void setProgressBarIndeterminateVisibility(bool z) =>
      _setProgressBarIndeterminateVisibility(reference, z ? 1 : 0).check();

  static final _setProgressBarIndeterminate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setProgressBarIndeterminate")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgressBarIndeterminate(boolean z)
  void setProgressBarIndeterminate(bool z) =>
      _setProgressBarIndeterminate(reference, z ? 1 : 0).check();

  static final _setProgress = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Int32)>>("Activity__setProgress")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setProgress(int i)
  void setProgress(int i) => _setProgress(reference, i).check();

  static final _setSecondaryProgress = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setSecondaryProgress")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setSecondaryProgress(int i)
  void setSecondaryProgress(int i) =>
      _setSecondaryProgress(reference, i).check();

  static final _setVolumeControlStream = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__setVolumeControlStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void setVolumeControlStream(int i)
  void setVolumeControlStream(int i) =>
      _setVolumeControlStream(reference, i).check();

  static final _getVolumeControlStream = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getVolumeControlStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final int getVolumeControlStream()
  int getVolumeControlStream() => _getVolumeControlStream(reference).integer;

  static final _setMediaController = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__setMediaController")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setMediaController(android.media.session.MediaController mediaController)
  void setMediaController(jni.JniObject mediaController) =>
      _setMediaController(reference, mediaController.reference).check();

  static final _getMediaController = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getMediaController")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final android.media.session.MediaController getMediaController()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getMediaController() =>
      jni.JniObject.fromRef(_getMediaController(reference).object);

  static final _runOnUiThread = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__runOnUiThread")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final void runOnUiThread(java.lang.Runnable runnable)
  void runOnUiThread(jni.JniObject runnable) =>
      _runOnUiThread(reference, runnable.reference).check();

  static final _onCreateView = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateView")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreateView(jni.JniString string, jni.JniObject context,
          jni.JniObject attributeSet) =>
      jni.JniObject.fromRef(_onCreateView(reference, string.reference,
              context.reference, attributeSet.reference)
          .object);

  static final _onCreateView1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onCreateView1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onCreateView1(jni.JniObject view, jni.JniString string,
          jni.JniObject context, jni.JniObject attributeSet) =>
      jni.JniObject.fromRef(_onCreateView1(reference, view.reference,
              string.reference, context.reference, attributeSet.reference)
          .object);

  static final _dump = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__dump")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)
  void dump(jni.JniString string, jni.JniObject fileDescriptor,
          jni.JniObject printWriter, jni.JniObject strings) =>
      _dump(reference, string.reference, fileDescriptor.reference,
              printWriter.reference, strings.reference)
          .check();

  static final _isImmersive = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__isImmersive")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isImmersive()
  bool isImmersive() => _isImmersive(reference).boolean;

  static final _setTranslucent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setTranslucent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean setTranslucent(boolean z)
  bool setTranslucent(bool z) => _setTranslucent(reference, z ? 1 : 0).boolean;

  static final _requestVisibleBehind = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__requestVisibleBehind")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean requestVisibleBehind(boolean z)
  bool requestVisibleBehind(bool z) =>
      _requestVisibleBehind(reference, z ? 1 : 0).boolean;

  static final _onVisibleBehindCanceled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onVisibleBehindCanceled")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onVisibleBehindCanceled()
  void onVisibleBehindCanceled() => _onVisibleBehindCanceled(reference).check();

  static final _onEnterAnimationComplete = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__onEnterAnimationComplete")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void onEnterAnimationComplete()
  void onEnterAnimationComplete() =>
      _onEnterAnimationComplete(reference).check();

  static final _setImmersive = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Uint8)>>("Activity__setImmersive")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setImmersive(boolean z)
  void setImmersive(bool z) => _setImmersive(reference, z ? 1 : 0).check();

  static final _setVrModeEnabled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
                  ffi.Pointer<ffi.Void>)>>("Activity__setVrModeEnabled")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)
  void setVrModeEnabled(bool z, jni.JniObject componentName) =>
      _setVrModeEnabled(reference, z ? 1 : 0, componentName.reference).check();

  static final _startActionMode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__startActionMode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject startActionMode(jni.JniObject callback) =>
      jni.JniObject.fromRef(
          _startActionMode(reference, callback.reference).object);

  static final _startActionMode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__startActionMode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject startActionMode1(jni.JniObject callback, int i) =>
      jni.JniObject.fromRef(
          _startActionMode1(reference, callback.reference, i).object);

  static final _onWindowStartingActionMode = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__onWindowStartingActionMode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onWindowStartingActionMode(jni.JniObject callback) =>
      jni.JniObject.fromRef(
          _onWindowStartingActionMode(reference, callback.reference).object);

  static final _onWindowStartingActionMode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("Activity__onWindowStartingActionMode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject onWindowStartingActionMode1(jni.JniObject callback, int i) =>
      jni.JniObject.fromRef(
          _onWindowStartingActionMode1(reference, callback.reference, i)
              .object);

  static final _onActionModeStarted = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActionModeStarted")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeStarted(android.view.ActionMode actionMode)
  void onActionModeStarted(jni.JniObject actionMode) =>
      _onActionModeStarted(reference, actionMode.reference).check();

  static final _onActionModeFinished = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__onActionModeFinished")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeFinished(android.view.ActionMode actionMode)
  void onActionModeFinished(jni.JniObject actionMode) =>
      _onActionModeFinished(reference, actionMode.reference).check();

  static final _shouldUpRecreateTask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__shouldUpRecreateTask")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldUpRecreateTask(android.content.Intent intent)
  bool shouldUpRecreateTask(jni.JniObject intent) =>
      _shouldUpRecreateTask(reference, intent.reference).boolean;

  static final _navigateUpTo = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__navigateUpTo")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpTo(android.content.Intent intent)
  bool navigateUpTo(jni.JniObject intent) =>
      _navigateUpTo(reference, intent.reference).boolean;

  static final _navigateUpToFromChild = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Activity__navigateUpToFromChild")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)
  bool navigateUpToFromChild(Activity activity, jni.JniObject intent) =>
      _navigateUpToFromChild(reference, activity.reference, intent.reference)
          .boolean;

  static final _getParentActivityIntent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__getParentActivityIntent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent getParentActivityIntent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject getParentActivityIntent() =>
      jni.JniObject.fromRef(_getParentActivityIntent(reference).object);

  static final _setEnterSharedElementCallback = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setEnterSharedElementCallback")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setEnterSharedElementCallback(jni.JniObject sharedElementCallback) =>
      _setEnterSharedElementCallback(reference, sharedElementCallback.reference)
          .check();

  static final _setExitSharedElementCallback = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__setExitSharedElementCallback")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setExitSharedElementCallback(jni.JniObject sharedElementCallback) =>
      _setExitSharedElementCallback(reference, sharedElementCallback.reference)
          .check();

  static final _postponeEnterTransition = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__postponeEnterTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void postponeEnterTransition()
  void postponeEnterTransition() => _postponeEnterTransition(reference).check();

  static final _startPostponedEnterTransition = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__startPostponedEnterTransition")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void startPostponedEnterTransition()
  void startPostponedEnterTransition() =>
      _startPostponedEnterTransition(reference).check();

  static final _requestDragAndDropPermissions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Activity__requestDragAndDropPermissions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JniObject requestDragAndDropPermissions(jni.JniObject dragEvent) =>
      jni.JniObject.fromRef(
          _requestDragAndDropPermissions(reference, dragEvent.reference)
              .object);

  static final _startLockTask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__startLockTask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void startLockTask()
  void startLockTask() => _startLockTask(reference).check();

  static final _stopLockTask = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("Activity__stopLockTask")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void stopLockTask()
  void stopLockTask() => _stopLockTask(reference).check();

  static final _showLockTaskEscapeMessage = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Activity__showLockTaskEscapeMessage")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void showLockTaskEscapeMessage()
  void showLockTaskEscapeMessage() =>
      _showLockTaskEscapeMessage(reference).check();

  static final _setShowWhenLocked = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setShowWhenLocked")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setShowWhenLocked(boolean z)
  void setShowWhenLocked(bool z) =>
      _setShowWhenLocked(reference, z ? 1 : 0).check();

  static final _setInheritShowWhenLocked = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setInheritShowWhenLocked")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setInheritShowWhenLocked(boolean z)
  void setInheritShowWhenLocked(bool z) =>
      _setInheritShowWhenLocked(reference, z ? 1 : 0).check();

  static final _setTurnScreenOn = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("Activity__setTurnScreenOn")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setTurnScreenOn(boolean z)
  void setTurnScreenOn(bool z) =>
      _setTurnScreenOn(reference, z ? 1 : 0).check();
}
