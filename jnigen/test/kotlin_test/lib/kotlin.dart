// Copyright (c) 2022, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_import

import "dart:ffi" as ffi;
import 'dart:isolate';
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("kotlin");

/// from: com.github.dart_lang.jnigen.SuspendFun
class SuspendFun extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  SuspendFun.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $SuspendFunType();

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "SuspendFun__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  SuspendFun() : super.fromRef(_ctor().object);

  static final _sayHello = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("SuspendFun__sayHello")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.Object sayHello(kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JString> sayHello() async {
    final receivePort = ReceivePort();
    final nativePort = receivePort.sendPort.nativePort;
    final $c = PortContinuation(const jni.JObjectType(), nativePort);
    const jni.JObjectType().fromRef(_sayHello(reference, $c.reference).object);
    final ptr = ffi.Pointer<ffi.Void>.fromAddress(await receivePort.first);
    return const jni.JStringType().fromRef(ptr);
  }

  static final _sayHello1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("SuspendFun__sayHello1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.Object sayHello(java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Future<jni.JString> sayHello1(jni.JString string) async {
    final receivePort = ReceivePort();
    final nativePort = receivePort.sendPort.nativePort;
    final $c = PortContinuation(const jni.JObjectType(), nativePort);
    const jni.JObjectType()
        .fromRef(_sayHello1(reference, string.reference, $c.reference).object);
    final ptr = ffi.Pointer<ffi.Void>.fromAddress(await receivePort.first);
    return const jni.JStringType().fromRef(ptr);
  }
}

class $SuspendFunType extends jni.JObjType<SuspendFun> {
  const $SuspendFunType();

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/SuspendFun;";

  @override
  SuspendFun fromRef(jni.JObjectPtr ref) => SuspendFun.fromRef(ref);
}

extension $SuspendFunArray on jni.JArray<SuspendFun> {
  SuspendFun operator [](int index) {
    return (elementType as $SuspendFunType)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, SuspendFun value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}

/// from: com.github.dart_lang.jni.PortContinuation
class PortContinuation<T extends jni.JObject> extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type(
        $T,
      );

  final jni.JObjType<T> $T;

  PortContinuation.fromRef(
    this.$T,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static $PortContinuationType<T> type<T extends jni.JObject>(
    jni.JObjType<T> $T,
  ) {
    return $PortContinuationType(
      $T,
    );
  }

  static final _ctor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int64)>>(
              "PortContinuation__ctor")
          .asFunction<jni.JniResult Function(int)>();

  /// from: public void <init>(long j)
  PortContinuation(this.$T, int j) : super.fromRef(_ctor(j).object);

  static final _getContext = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>)>>("PortContinuation__getContext")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public kotlin.coroutines.CoroutineContext getContext()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getContext() =>
      const jni.JObjectType().fromRef(_getContext(reference).object);

  static final _resumeWith = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("PortContinuation__resumeWith")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void resumeWith(java.lang.Object object)
  void resumeWith(jni.JObject object) =>
      _resumeWith(reference, object.reference).check();
}

class $PortContinuationType<T extends jni.JObject>
    extends jni.JObjType<PortContinuation<T>> {
  final jni.JObjType<T> $T;

  const $PortContinuationType(
    this.$T,
  );

  @override
  String get signature => r"Lcom/github/dart_lang/jni/PortContinuation;";

  @override
  PortContinuation<T> fromRef(jni.JObjectPtr ref) =>
      PortContinuation.fromRef($T, ref);
}

extension $PortContinuationArray<T extends jni.JObject>
    on jni.JArray<PortContinuation<T>> {
  PortContinuation<T> operator [](int index) {
    return (elementType as $PortContinuationType<T>)
        .fromRef(elementAt(index, jni.JniCallType.objectType).object);
  }

  void operator []=(int index, PortContinuation<T> value) {
    (this as jni.JArray<jni.JObject>)[index] = value;
  }
}
