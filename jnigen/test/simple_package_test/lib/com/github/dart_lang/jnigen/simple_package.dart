// Copyright (c) 2022, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names
// ignore_for_file: annotate_overrides
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: unused_element

import "dart:ffi" as ffi;
import "package:jni/jni.dart" as jni;

import "../../../../_init.dart" show jniLookup;

/// from: com.github.dart_lang.jnigen.simple_package.Example
class Example extends jni.JniObject {
  Example.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  /// from: static public final int ON
  static const ON = 1;

  /// from: static public final int OFF
  static const OFF = 0;

  static final _get_aux =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "get_com_github_dart_lang_jnigen_simple_package_Example_aux")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public com.github.dart_lang.jnigen.simple_package.Example.Aux aux
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Example_Aux get aux => Example_Aux.fromRef(_get_aux());
  static final _set_aux =
      jniLookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
              "set_com_github_dart_lang_jnigen_simple_package_Example_aux")
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public com.github.dart_lang.jnigen.simple_package.Example.Aux aux
  /// The returned object must be deleted after use, by calling the `delete` method.
  static set aux(Example_Aux value) => _set_aux(value.reference);

  static final _get_num = jniLookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          "get_com_github_dart_lang_jnigen_simple_package_Example_num")
      .asFunction<int Function()>();

  /// from: static public int num
  static int get num => _get_num();
  static final _set_num =
      jniLookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
              "set_com_github_dart_lang_jnigen_simple_package_Example_num")
          .asFunction<void Function(int)>();

  /// from: static public int num
  static set num(int value) => _set_num(value);

  static final _ctor =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "com_github_dart_lang_jnigen_simple_package_Example_ctor")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: public void <init>()
  Example() : super.fromRef(_ctor()) {
    jni.Jni.env.checkException();
  }

  static final _getAux =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
              "com_github_dart_lang_jnigen_simple_package_Example_getAux")
          .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// from: static public com.github.dart_lang.jnigen.simple_package.Example.Aux getAux()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Example_Aux getAux() {
    final result__ = Example_Aux.fromRef(_getAux());
    jni.Jni.env.checkException();
    return result__;
  }

  static final _addInts =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>(
              "com_github_dart_lang_jnigen_simple_package_Example_addInts")
          .asFunction<int Function(int, int)>();

  /// from: static public int addInts(int a, int b)
  static int addInts(int a, int b) {
    final result__ = _addInts(a, b);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getSelf = jniLookup<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>(
          "com_github_dart_lang_jnigen_simple_package_Example_getSelf")
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  /// from: public com.github.dart_lang.jnigen.simple_package.Example getSelf()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Example getSelf() {
    final result__ = Example.fromRef(_getSelf(reference));
    jni.Jni.env.checkException();
    return result__;
  }

  static final _getNum =
      jniLookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Void>)>>(
              "com_github_dart_lang_jnigen_simple_package_Example_getNum")
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getNum()
  int getNum() {
    final result__ = _getNum(reference);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _setNum = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32)>>(
          "com_github_dart_lang_jnigen_simple_package_Example_setNum")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setNum(int num)
  void setNum(int num) {
    final result__ = _setNum(reference, num);
    jni.Jni.env.checkException();
    return result__;
  }

  static final _throwException = jniLookup<
              ffi.NativeFunction<ffi.Void Function()>>(
          "com_github_dart_lang_jnigen_simple_package_Example_throwException")
      .asFunction<void Function()>();

  /// from: static public void throwException()
  static void throwException() {
    final result__ = _throwException();
    jni.Jni.env.checkException();
    return result__;
  }
}

/// from: com.github.dart_lang.jnigen.simple_package.Example$Aux
class Example_Aux extends jni.JniObject {
  Example_Aux.fromRef(ffi.Pointer<ffi.Void> ref) : super.fromRef(ref);

  static final _get_value = jniLookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
    ffi.Pointer<ffi.Void>,
  )>>("get_com_github_dart_lang_jnigen_simple_package_Example__Aux_value")
      .asFunction<
          int Function(
    ffi.Pointer<ffi.Void>,
  )>();

  /// from: public boolean value
  bool get value => _get_value(reference) != 0;
  static final _set_value = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "set_com_github_dart_lang_jnigen_simple_package_Example__Aux_value")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean value
  set value(bool value) => _set_value(reference, value ? 1 : 0);

  static final _ctor =
      jniLookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Uint8)>>(
              "com_github_dart_lang_jnigen_simple_package_Example__Aux_ctor")
          .asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  /// from: public void <init>(boolean value)
  Example_Aux(bool value) : super.fromRef(_ctor(value ? 1 : 0)) {
    jni.Jni.env.checkException();
  }

  static final _getValue = jniLookup<
              ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Void>)>>(
          "com_github_dart_lang_jnigen_simple_package_Example__Aux_getValue")
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// from: public boolean getValue()
  bool getValue() {
    final result__ = _getValue(reference) != 0;
    jni.Jni.env.checkException();
    return result__;
  }

  static final _setValue = jniLookup<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "com_github_dart_lang_jnigen_simple_package_Example__Aux_setValue")
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public void setValue(boolean value)
  void setValue(bool value) {
    final result__ = _setValue(reference, value ? 1 : 0);
    jni.Jni.env.checkException();
    return result__;
  }
}
