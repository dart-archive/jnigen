// Copyright (c) 2022, the Dart project authors. Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final jniEnv = jni.Jni.env;
final jniAccessors = jni.Jni.accessors;

/// from: com.github.dart_lang.jnigen.simple_package.Example
class Example extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  Example.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/simple_package/Example");

  /// The type which includes information such as the signature of this class.
  static const type = $ExampleType();

  /// from: static public final int ON
  static const ON = 1;

  /// from: static public final int OFF
  static const OFF = 0;

  /// from: static public final double PI
  static const PI = 3.14159;

  /// from: static public final char SEMICOLON
  static const SEMICOLON = r""";""";

  /// from: static public final java.lang.String SEMICOLON_STRING
  static const SEMICOLON_STRING = r""";""";

  static final _id_amount = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"amount",
    r"I",
  );

  /// from: static public int amount
  static int get amount => jniAccessors
      .getStaticField(_classRef, _id_amount, jni.JniCallType.intType)
      .integer;

  /// from: static public int amount
  static set amount(int value) =>
      jniEnv.SetStaticIntField(_classRef, _id_amount, value);

  static final _id_pi = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"pi",
    r"D",
  );

  /// from: static public double pi
  static double get pi => jniAccessors
      .getStaticField(_classRef, _id_pi, jni.JniCallType.doubleType)
      .doubleFloat;

  /// from: static public double pi
  static set pi(double value) =>
      jniEnv.SetStaticDoubleField(_classRef, _id_pi, value);

  static final _id_asterisk = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"asterisk",
    r"C",
  );

  /// from: static public char asterisk
  static int get asterisk => jniAccessors
      .getStaticField(_classRef, _id_asterisk, jni.JniCallType.charType)
      .char;

  /// from: static public char asterisk
  static set asterisk(int value) =>
      jniEnv.SetStaticCharField(_classRef, _id_asterisk, value);

  static final _id_name = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"name",
    r"Ljava/lang/String;",
  );

  /// from: static public java.lang.String name
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString get name => const jni.JStringType().fromRef(jniAccessors
      .getStaticField(_classRef, _id_name, jni.JniCallType.objectType)
      .object);

  /// from: static public java.lang.String name
  /// The returned object must be deleted after use, by calling the `delete` method.
  static set name(jni.JString value) =>
      jniEnv.SetStaticObjectField(_classRef, _id_name, value.reference);

  static final _id_aux = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"aux",
    r"Lcom/github/dart_lang/jnigen/simple_package/Example$Aux;",
  );

  /// from: static public com.github.dart_lang.jnigen.simple_package.Example.Aux aux
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Example_Aux get aux => const $Example_AuxType().fromRef(jniAccessors
      .getStaticField(_classRef, _id_aux, jni.JniCallType.objectType)
      .object);

  /// from: static public com.github.dart_lang.jnigen.simple_package.Example.Aux aux
  /// The returned object must be deleted after use, by calling the `delete` method.
  static set aux(Example_Aux value) =>
      jniEnv.SetStaticObjectField(_classRef, _id_aux, value.reference);

  static final _id_trillion = jniAccessors.getFieldIDOf(
    _classRef,
    r"trillion",
    r"J",
  );

  /// from: public long trillion
  int get trillion => jniAccessors
      .getField(reference, _id_trillion, jni.JniCallType.longType)
      .long;

  /// from: public long trillion
  set trillion(int value) =>
      jniEnv.SetLongField(reference, _id_trillion, value);

  static final _id_isAchillesDead = jniAccessors.getFieldIDOf(
    _classRef,
    r"isAchillesDead",
    r"Z",
  );

  /// from: public boolean isAchillesDead
  bool get isAchillesDead => jniAccessors
      .getField(reference, _id_isAchillesDead, jni.JniCallType.booleanType)
      .boolean;

  /// from: public boolean isAchillesDead
  set isAchillesDead(bool value) =>
      jniEnv.SetBooleanField(reference, _id_isAchillesDead, value ? 1 : 0);

  static final _id_bestFighterInGreece = jniAccessors.getFieldIDOf(
    _classRef,
    r"bestFighterInGreece",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String bestFighterInGreece
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString get bestFighterInGreece =>
      const jni.JStringType().fromRef(jniAccessors
          .getField(
              reference, _id_bestFighterInGreece, jni.JniCallType.objectType)
          .object);

  /// from: public java.lang.String bestFighterInGreece
  /// The returned object must be deleted after use, by calling the `delete` method.
  set bestFighterInGreece(jni.JString value) => jniEnv.SetObjectField(
      reference, _id_bestFighterInGreece, value.reference);

  static final _id_random = jniAccessors.getFieldIDOf(
    _classRef,
    r"random",
    r"Ljava/util/Random;",
  );

  /// from: public java.util.Random random
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject get random => const jni.JObjectType().fromRef(jniAccessors
      .getField(reference, _id_random, jni.JniCallType.objectType)
      .object);

  /// from: public java.util.Random random
  /// The returned object must be deleted after use, by calling the `delete` method.
  set random(jni.JObject value) =>
      jniEnv.SetObjectField(reference, _id_random, value.reference);

  static final _id_num = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"num",
    r"I",
  );

  /// from: static public int num
  static int get num => jniAccessors
      .getStaticField(_classRef, _id_num, jni.JniCallType.intType)
      .integer;

  /// from: static public int num
  static set num(int value) =>
      jniEnv.SetStaticIntField(_classRef, _id_num, value);

  static final _id_getAmount =
      jniAccessors.getStaticMethodIDOf(_classRef, r"getAmount", r"()I");

  /// from: static public int getAmount()
  static int getAmount() {
    return jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_getAmount, jni.JniCallType.intType, []).integer;
  }

  static final _id_getPi =
      jniAccessors.getStaticMethodIDOf(_classRef, r"getPi", r"()D");

  /// from: static public double getPi()
  static double getPi() {
    return jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_getPi, jni.JniCallType.doubleType, []).doubleFloat;
  }

  static final _id_getAsterisk =
      jniAccessors.getStaticMethodIDOf(_classRef, r"getAsterisk", r"()C");

  /// from: static public char getAsterisk()
  static int getAsterisk() {
    return jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_getAsterisk, jni.JniCallType.charType, []).char;
  }

  static final _id_getName = jniAccessors.getStaticMethodIDOf(
      _classRef, r"getName", r"()Ljava/lang/String;");

  /// from: static public java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JString getName() {
    return const jni.JStringType().fromRef(jniAccessors
        .callStaticMethodWithArgs(
            _classRef, _id_getName, jni.JniCallType.objectType, []).object);
  }

  static final _id_setAmount =
      jniAccessors.getStaticMethodIDOf(_classRef, r"setAmount", r"(I)V");

  /// from: static public void setAmount(int newAmount)
  static void setAmount(
    int newAmount,
  ) {
    return jniAccessors.callStaticMethodWithArgs(_classRef, _id_setAmount,
        jni.JniCallType.voidType, [jni.JValueInt(newAmount)]).check();
  }

  static final _id_setName = jniAccessors.getStaticMethodIDOf(
      _classRef, r"setName", r"(Ljava/lang/String;)V");

  /// from: static public void setName(java.lang.String newName)
  static void setName(
    jni.JString newName,
  ) {
    return jniAccessors.callStaticMethodWithArgs(_classRef, _id_setName,
        jni.JniCallType.voidType, [newName.reference]).check();
  }

  static final _id_max4 =
      jniAccessors.getStaticMethodIDOf(_classRef, r"max4", r"(IIII)I");

  /// from: static public int max4(int a, int b, int c, int d)
  static int max4(
    int a,
    int b,
    int c,
    int d,
  ) {
    return jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_max4, jni.JniCallType.intType, [
      jni.JValueInt(a),
      jni.JValueInt(b),
      jni.JValueInt(c),
      jni.JValueInt(d)
    ]).integer;
  }

  static final _id_max8 =
      jniAccessors.getStaticMethodIDOf(_classRef, r"max8", r"(IIIIIIII)I");

  /// from: static public int max8(int a, int b, int c, int d, int e, int f, int g, int h)
  static int max8(
    int a,
    int b,
    int c,
    int d,
    int e,
    int f,
    int g,
    int h,
  ) {
    return jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_max8, jni.JniCallType.intType, [
      jni.JValueInt(a),
      jni.JValueInt(b),
      jni.JValueInt(c),
      jni.JValueInt(d),
      jni.JValueInt(e),
      jni.JValueInt(f),
      jni.JValueInt(g),
      jni.JValueInt(h)
    ]).integer;
  }

  static final _id_getTrillion =
      jniAccessors.getMethodIDOf(_classRef, r"getTrillion", r"()J");

  /// from: public long getTrillion()
  int getTrillion() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_getTrillion, jni.JniCallType.longType, []).long;
  }

  static final _id_isAchillesAlive =
      jniAccessors.getMethodIDOf(_classRef, r"isAchillesAlive", r"()Z");

  /// from: public boolean isAchillesAlive()
  bool isAchillesAlive() {
    return jniAccessors.callMethodWithArgs(reference, _id_isAchillesAlive,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_whoIsBestFighterInGreece = jniAccessors.getMethodIDOf(
      _classRef, r"whoIsBestFighterInGreece", r"()Ljava/lang/String;");

  /// from: public java.lang.String whoIsBestFighterInGreece()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString whoIsBestFighterInGreece() {
    return const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
        reference,
        _id_whoIsBestFighterInGreece,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getRandom = jniAccessors.getMethodIDOf(
      _classRef, r"getRandom", r"()Ljava/util/Random;");

  /// from: public java.util.Random getRandom()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getRandom() {
    return const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
        reference, _id_getRandom, jni.JniCallType.objectType, []).object);
  }

  static final _id_getRandomLong =
      jniAccessors.getMethodIDOf(_classRef, r"getRandomLong", r"()J");

  /// from: public long getRandomLong()
  int getRandomLong() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_getRandomLong, jni.JniCallType.longType, []).long;
  }

  static final _id_add4Longs =
      jniAccessors.getMethodIDOf(_classRef, r"add4Longs", r"(JJJJ)J");

  /// from: public long add4Longs(long a, long b, long c, long d)
  int add4Longs(
    int a,
    int b,
    int c,
    int d,
  ) {
    return jniAccessors.callMethodWithArgs(
        reference, _id_add4Longs, jni.JniCallType.longType, [a, b, c, d]).long;
  }

  static final _id_add8Longs =
      jniAccessors.getMethodIDOf(_classRef, r"add8Longs", r"(JJJJJJJJ)J");

  /// from: public long add8Longs(long a, long b, long c, long d, long e, long f, long g, long h)
  int add8Longs(
    int a,
    int b,
    int c,
    int d,
    int e,
    int f,
    int g,
    int h,
  ) {
    return jniAccessors.callMethodWithArgs(reference, _id_add8Longs,
        jni.JniCallType.longType, [a, b, c, d, e, f, g, h]).long;
  }

  static final _id_getRandomNumericString = jniAccessors.getMethodIDOf(
      _classRef,
      r"getRandomNumericString",
      r"(Ljava/util/Random;)Ljava/lang/String;");

  /// from: public java.lang.String getRandomNumericString(java.util.Random random)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getRandomNumericString(
    jni.JObject random,
  ) {
    return const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
        reference,
        _id_getRandomNumericString,
        jni.JniCallType.objectType,
        [random.reference]).object);
  }

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Example() {
    return Example.fromRef(
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"(I)V");

  /// from: public void <init>(int internal)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Example.ctor1(
    int internal,
  ) {
    return Example.fromRef(jniAccessors.newObjectWithArgs(
        _classRef, _id_ctor1, [jni.JValueInt(internal)]).object);
  }

  static final _id_whichExample =
      jniAccessors.getMethodIDOf(_classRef, r"whichExample", r"()I");

  /// from: public int whichExample()
  int whichExample() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_whichExample, jni.JniCallType.intType, []).integer;
  }

  static final _id_getAux = jniAccessors.getStaticMethodIDOf(_classRef,
      r"getAux", r"()Lcom/github/dart_lang/jnigen/simple_package/Example$Aux;");

  /// from: static public com.github.dart_lang.jnigen.simple_package.Example.Aux getAux()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Example_Aux getAux() {
    return const $Example_AuxType().fromRef(jniAccessors
        .callStaticMethodWithArgs(
            _classRef, _id_getAux, jni.JniCallType.objectType, []).object);
  }

  static final _id_addInts =
      jniAccessors.getStaticMethodIDOf(_classRef, r"addInts", r"(II)I");

  /// from: static public int addInts(int a, int b)
  static int addInts(
    int a,
    int b,
  ) {
    return jniAccessors.callStaticMethodWithArgs(_classRef, _id_addInts,
        jni.JniCallType.intType, [jni.JValueInt(a), jni.JValueInt(b)]).integer;
  }

  static final _id_getArr =
      jniAccessors.getStaticMethodIDOf(_classRef, r"getArr", r"()[I");

  /// from: static public int[] getArr()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JArray<jni.JInt> getArr() {
    return const jni.JArrayType(jni.JIntType()).fromRef(jniAccessors
        .callStaticMethodWithArgs(
            _classRef, _id_getArr, jni.JniCallType.objectType, []).object);
  }

  static final _id_addAll =
      jniAccessors.getStaticMethodIDOf(_classRef, r"addAll", r"([I)I");

  /// from: static public int addAll(int[] arr)
  static int addAll(
    jni.JArray<jni.JInt> arr,
  ) {
    return jniAccessors.callStaticMethodWithArgs(_classRef, _id_addAll,
        jni.JniCallType.intType, [arr.reference]).integer;
  }

  static final _id_getSelf = jniAccessors.getMethodIDOf(_classRef, r"getSelf",
      r"()Lcom/github/dart_lang/jnigen/simple_package/Example;");

  /// from: public com.github.dart_lang.jnigen.simple_package.Example getSelf()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Example getSelf() {
    return const $ExampleType().fromRef(jniAccessors.callMethodWithArgs(
        reference, _id_getSelf, jni.JniCallType.objectType, []).object);
  }

  static final _id_getNum =
      jniAccessors.getMethodIDOf(_classRef, r"getNum", r"()I");

  /// from: public int getNum()
  int getNum() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_getNum, jni.JniCallType.intType, []).integer;
  }

  static final _id_setNum =
      jniAccessors.getMethodIDOf(_classRef, r"setNum", r"(I)V");

  /// from: public void setNum(int num)
  void setNum(
    int num,
  ) {
    return jniAccessors.callMethodWithArgs(reference, _id_setNum,
        jni.JniCallType.voidType, [jni.JValueInt(num)]).check();
  }

  static final _id_getInternal =
      jniAccessors.getMethodIDOf(_classRef, r"getInternal", r"()I");

  /// from: public int getInternal()
  int getInternal() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_getInternal, jni.JniCallType.intType, []).integer;
  }

  static final _id_setInternal =
      jniAccessors.getMethodIDOf(_classRef, r"setInternal", r"(I)V");

  /// from: public void setInternal(int internal)
  void setInternal(
    int internal,
  ) {
    return jniAccessors.callMethodWithArgs(reference, _id_setInternal,
        jni.JniCallType.voidType, [jni.JValueInt(internal)]).check();
  }

  static final _id_throwException =
      jniAccessors.getStaticMethodIDOf(_classRef, r"throwException", r"()V");

  /// from: static public void throwException()
  static void throwException() {
    return jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_throwException, jni.JniCallType.voidType, []).check();
  }
}

class $ExampleType extends jni.JObjType<Example> {
  const $ExampleType();

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/simple_package/Example;";

  @override
  Example fromRef(jni.JObjectPtr ref) => Example.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExampleType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $ExampleType && other is $ExampleType;
  }
}

/// from: com.github.dart_lang.jnigen.simple_package.Example$Aux
class Example_Aux extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  Example_Aux.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/simple_package/Example$Aux");

  /// The type which includes information such as the signature of this class.
  static const type = $Example_AuxType();
  static final _id_value = jniAccessors.getFieldIDOf(
    _classRef,
    r"value",
    r"Z",
  );

  /// from: public boolean value
  bool get value => jniAccessors
      .getField(reference, _id_value, jni.JniCallType.booleanType)
      .boolean;

  /// from: public boolean value
  set value(bool value) =>
      jniEnv.SetBooleanField(reference, _id_value, value ? 1 : 0);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"(Z)V");

  /// from: public void <init>(boolean value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Example_Aux(
    bool value,
  ) {
    return Example_Aux.fromRef(jniAccessors
        .newObjectWithArgs(_classRef, _id_ctor, [value ? 1 : 0]).object);
  }

  static final _id_getValue =
      jniAccessors.getMethodIDOf(_classRef, r"getValue", r"()Z");

  /// from: public boolean getValue()
  bool getValue() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_getValue, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setValue =
      jniAccessors.getMethodIDOf(_classRef, r"setValue", r"(Z)V");

  /// from: public void setValue(boolean value)
  void setValue(
    bool value,
  ) {
    return jniAccessors.callMethodWithArgs(reference, _id_setValue,
        jni.JniCallType.voidType, [value ? 1 : 0]).check();
  }
}

class $Example_AuxType extends jni.JObjType<Example_Aux> {
  const $Example_AuxType();

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/simple_package/Example$Aux;";

  @override
  Example_Aux fromRef(jni.JObjectPtr ref) => Example_Aux.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Example_AuxType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $Example_AuxType && other is $Example_AuxType;
  }
}

/// from: com.github.dart_lang.jnigen.pkg2.C2
class C2 extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  C2.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"com/github/dart_lang/jnigen/pkg2/C2");

  /// The type which includes information such as the signature of this class.
  static const type = $C2Type();
  static final _id_CONSTANT = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"CONSTANT",
    r"I",
  );

  /// from: static public int CONSTANT
  static int get CONSTANT => jniAccessors
      .getStaticField(_classRef, _id_CONSTANT, jni.JniCallType.intType)
      .integer;

  /// from: static public int CONSTANT
  static set CONSTANT(int value) =>
      jniEnv.SetStaticIntField(_classRef, _id_CONSTANT, value);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory C2() {
    return C2.fromRef(
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }
}

class $C2Type extends jni.JObjType<C2> {
  const $C2Type();

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/pkg2/C2;";

  @override
  C2 fromRef(jni.JObjectPtr ref) => C2.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($C2Type).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $C2Type && other is $C2Type;
  }
}

/// from: com.github.dart_lang.jnigen.pkg2.Example
class Example1 extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  Example1.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"com/github/dart_lang/jnigen/pkg2/Example");

  /// The type which includes information such as the signature of this class.
  static const type = $Example1Type();
  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Example1() {
    return Example1.fromRef(
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }

  static final _id_whichExample =
      jniAccessors.getMethodIDOf(_classRef, r"whichExample", r"()I");

  /// from: public int whichExample()
  int whichExample() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_whichExample, jni.JniCallType.intType, []).integer;
  }
}

class $Example1Type extends jni.JObjType<Example1> {
  const $Example1Type();

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/pkg2/Example;";

  @override
  Example1 fromRef(jni.JObjectPtr ref) => Example1.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Example1Type).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $Example1Type && other is $Example1Type;
  }
}

/// from: com.github.dart_lang.jnigen.generics.GrandParent
class GrandParent<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType $type = type(T);

  final jni.JObjType<$T> T;

  GrandParent.fromRef(
    this.T,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/generics/GrandParent");

  /// The type which includes information such as the signature of this class.
  static $GrandParentType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $GrandParentType(
      T,
    );
  }

  static final _id_value = jniAccessors.getFieldIDOf(
    _classRef,
    r"value",
    r"Ljava/lang/Object;",
  );

  /// from: public T value
  /// The returned object must be deleted after use, by calling the `delete` method.
  $T get value => T.fromRef(jniAccessors
      .getField(reference, _id_value, jni.JniCallType.objectType)
      .object);

  /// from: public T value
  /// The returned object must be deleted after use, by calling the `delete` method.
  set value($T value) =>
      jniEnv.SetObjectField(reference, _id_value, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/Object;)V");

  /// from: public void <init>(T value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory GrandParent(
    $T value, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      value.$type,
    ]) as jni.JObjType<$T>;
    return GrandParent.fromRef(
        T,
        jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [value.reference]).object);
  }

  static final _id_stringParent = jniAccessors.getMethodIDOf(
      _classRef,
      r"stringParent",
      r"()Lcom/github/dart_lang/jnigen/generics/GrandParent$Parent;");

  /// from: public com.github.dart_lang.jnigen.generics.GrandParent<T>.Parent<java.lang.String> stringParent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GrandParent_Parent<jni.JObject, jni.JString> stringParent() {
    return const $GrandParent_ParentType(jni.JObjectType(), jni.JStringType())
        .fromRef(jniAccessors.callMethodWithArgs(reference, _id_stringParent,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_varParent = jniAccessors.getMethodIDOf(
      _classRef,
      r"varParent",
      r"(Ljava/lang/Object;)Lcom/github/dart_lang/jnigen/generics/GrandParent$Parent;");

  /// from: public com.github.dart_lang.jnigen.generics.GrandParent<T>.Parent<S> varParent(S nestedValue)
  /// The returned object must be deleted after use, by calling the `delete` method.
  GrandParent_Parent<jni.JObject, $S> varParent<$S extends jni.JObject>(
    $S nestedValue, {
    jni.JObjType<$S>? S,
  }) {
    S ??= jni.lowestCommonSuperType([
      nestedValue.$type,
    ]) as jni.JObjType<$S>;
    return $GrandParent_ParentType(const jni.JObjectType(), S).fromRef(
        jniAccessors.callMethodWithArgs(reference, _id_varParent,
            jni.JniCallType.objectType, [nestedValue.reference]).object);
  }

  static final _id_stringStaticParent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      r"stringStaticParent",
      r"()Lcom/github/dart_lang/jnigen/generics/GrandParent$StaticParent;");

  /// from: static public com.github.dart_lang.jnigen.generics.GrandParent.StaticParent<java.lang.String> stringStaticParent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static GrandParent_StaticParent<jni.JString> stringStaticParent() {
    return const $GrandParent_StaticParentType(jni.JStringType()).fromRef(
        jniAccessors.callStaticMethodWithArgs(_classRef, _id_stringStaticParent,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_varStaticParent = jniAccessors.getStaticMethodIDOf(
      _classRef,
      r"varStaticParent",
      r"(Ljava/lang/Object;)Lcom/github/dart_lang/jnigen/generics/GrandParent$StaticParent;");

  /// from: static public com.github.dart_lang.jnigen.generics.GrandParent.StaticParent<S> varStaticParent(S value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static GrandParent_StaticParent<$S> varStaticParent<$S extends jni.JObject>(
    $S value, {
    jni.JObjType<$S>? S,
  }) {
    S ??= jni.lowestCommonSuperType([
      value.$type,
    ]) as jni.JObjType<$S>;
    return $GrandParent_StaticParentType(S).fromRef(jniAccessors
        .callStaticMethodWithArgs(_classRef, _id_varStaticParent,
            jni.JniCallType.objectType, [value.reference]).object);
  }

  static final _id_staticParentWithSameType = jniAccessors.getMethodIDOf(
      _classRef,
      r"staticParentWithSameType",
      r"()Lcom/github/dart_lang/jnigen/generics/GrandParent$StaticParent;");

  /// from: public com.github.dart_lang.jnigen.generics.GrandParent.StaticParent<T> staticParentWithSameType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  GrandParent_StaticParent<$T> staticParentWithSameType() {
    return $GrandParent_StaticParentType(T).fromRef(jniAccessors
        .callMethodWithArgs(reference, _id_staticParentWithSameType,
            jni.JniCallType.objectType, []).object);
  }
}

class $GrandParentType<$T extends jni.JObject>
    extends jni.JObjType<GrandParent<$T>> {
  final jni.JObjType<$T> T;

  const $GrandParentType(
    this.T,
  );

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/generics/GrandParent;";

  @override
  GrandParent<$T> fromRef(jni.JObjectPtr ref) => GrandParent.fromRef(T, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($GrandParentType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $GrandParentType &&
        other is $GrandParentType &&
        T == other.T;
  }
}

/// from: com.github.dart_lang.jnigen.generics.GrandParent$Parent
class GrandParent_Parent<$T extends jni.JObject, $S extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType $type = type(T, S);

  final jni.JObjType<$T> T;
  final jni.JObjType<$S> S;

  GrandParent_Parent.fromRef(
    this.T,
    this.S,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/generics/GrandParent$Parent");

  /// The type which includes information such as the signature of this class.
  static $GrandParent_ParentType<$T, $S>
      type<$T extends jni.JObject, $S extends jni.JObject>(
    jni.JObjType<$T> T,
    jni.JObjType<$S> S,
  ) {
    return $GrandParent_ParentType(
      T,
      S,
    );
  }

  static final _id_parentValue = jniAccessors.getFieldIDOf(
    _classRef,
    r"parentValue",
    r"Ljava/lang/Object;",
  );

  /// from: public T parentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  $T get parentValue => T.fromRef(jniAccessors
      .getField(reference, _id_parentValue, jni.JniCallType.objectType)
      .object);

  /// from: public T parentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  set parentValue($T value) =>
      jniEnv.SetObjectField(reference, _id_parentValue, value.reference);

  static final _id_value = jniAccessors.getFieldIDOf(
    _classRef,
    r"value",
    r"Ljava/lang/Object;",
  );

  /// from: public S value
  /// The returned object must be deleted after use, by calling the `delete` method.
  $S get value => S.fromRef(jniAccessors
      .getField(reference, _id_value, jni.JniCallType.objectType)
      .object);

  /// from: public S value
  /// The returned object must be deleted after use, by calling the `delete` method.
  set value($S value) =>
      jniEnv.SetObjectField(reference, _id_value, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/Object;Ljava/lang/Object;)V");

  /// from: public void <init>(T parentValue, S value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory GrandParent_Parent(
    $T parentValue,
    $S value, {
    jni.JObjType<$T>? T,
    jni.JObjType<$S>? S,
  }) {
    T ??= jni.lowestCommonSuperType([
      parentValue.$type,
    ]) as jni.JObjType<$T>;
    S ??= jni.lowestCommonSuperType([
      value.$type,
    ]) as jni.JObjType<$S>;
    return GrandParent_Parent.fromRef(
        T,
        S,
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [parentValue.reference, value.reference]).object);
  }
}

class $GrandParent_ParentType<$T extends jni.JObject, $S extends jni.JObject>
    extends jni.JObjType<GrandParent_Parent<$T, $S>> {
  final jni.JObjType<$T> T;
  final jni.JObjType<$S> S;

  const $GrandParent_ParentType(
    this.T,
    this.S,
  );

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/generics/GrandParent$Parent;";

  @override
  GrandParent_Parent<$T, $S> fromRef(jni.JObjectPtr ref) =>
      GrandParent_Parent.fromRef(T, S, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($GrandParent_ParentType, T, S);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $GrandParent_ParentType &&
        other is $GrandParent_ParentType &&
        T == other.T &&
        S == other.S;
  }
}

/// from: com.github.dart_lang.jnigen.generics.GrandParent$Parent$Child
class GrandParent_Parent_Child<$T extends jni.JObject, $S extends jni.JObject,
    $U extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType $type = type(T, S, U);

  final jni.JObjType<$T> T;
  final jni.JObjType<$S> S;
  final jni.JObjType<$U> U;

  GrandParent_Parent_Child.fromRef(
    this.T,
    this.S,
    this.U,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(
      r"com/github/dart_lang/jnigen/generics/GrandParent$Parent$Child");

  /// The type which includes information such as the signature of this class.
  static $GrandParent_Parent_ChildType<$T, $S, $U> type<$T extends jni.JObject,
      $S extends jni.JObject, $U extends jni.JObject>(
    jni.JObjType<$T> T,
    jni.JObjType<$S> S,
    jni.JObjType<$U> U,
  ) {
    return $GrandParent_Parent_ChildType(
      T,
      S,
      U,
    );
  }

  static final _id_grandParentValue = jniAccessors.getFieldIDOf(
    _classRef,
    r"grandParentValue",
    r"Ljava/lang/Object;",
  );

  /// from: public T grandParentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  $T get grandParentValue => T.fromRef(jniAccessors
      .getField(reference, _id_grandParentValue, jni.JniCallType.objectType)
      .object);

  /// from: public T grandParentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  set grandParentValue($T value) =>
      jniEnv.SetObjectField(reference, _id_grandParentValue, value.reference);

  static final _id_parentValue = jniAccessors.getFieldIDOf(
    _classRef,
    r"parentValue",
    r"Ljava/lang/Object;",
  );

  /// from: public S parentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  $S get parentValue => S.fromRef(jniAccessors
      .getField(reference, _id_parentValue, jni.JniCallType.objectType)
      .object);

  /// from: public S parentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  set parentValue($S value) =>
      jniEnv.SetObjectField(reference, _id_parentValue, value.reference);

  static final _id_value = jniAccessors.getFieldIDOf(
    _classRef,
    r"value",
    r"Ljava/lang/Object;",
  );

  /// from: public U value
  /// The returned object must be deleted after use, by calling the `delete` method.
  $U get value => U.fromRef(jniAccessors
      .getField(reference, _id_value, jni.JniCallType.objectType)
      .object);

  /// from: public U value
  /// The returned object must be deleted after use, by calling the `delete` method.
  set value($U value) =>
      jniEnv.SetObjectField(reference, _id_value, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V");

  /// from: public void <init>(T grandParentValue, S parentValue, U value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory GrandParent_Parent_Child(
    $T grandParentValue,
    $S parentValue,
    $U value, {
    jni.JObjType<$T>? T,
    jni.JObjType<$S>? S,
    jni.JObjType<$U>? U,
  }) {
    T ??= jni.lowestCommonSuperType([
      grandParentValue.$type,
    ]) as jni.JObjType<$T>;
    S ??= jni.lowestCommonSuperType([
      parentValue.$type,
    ]) as jni.JObjType<$S>;
    U ??= jni.lowestCommonSuperType([
      value.$type,
    ]) as jni.JObjType<$U>;
    return GrandParent_Parent_Child.fromRef(
        T,
        S,
        U,
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          grandParentValue.reference,
          parentValue.reference,
          value.reference
        ]).object);
  }
}

class $GrandParent_Parent_ChildType<$T extends jni.JObject,
        $S extends jni.JObject, $U extends jni.JObject>
    extends jni.JObjType<GrandParent_Parent_Child<$T, $S, $U>> {
  final jni.JObjType<$T> T;
  final jni.JObjType<$S> S;
  final jni.JObjType<$U> U;

  const $GrandParent_Parent_ChildType(
    this.T,
    this.S,
    this.U,
  );

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/generics/GrandParent$Parent$Child;";

  @override
  GrandParent_Parent_Child<$T, $S, $U> fromRef(jni.JObjectPtr ref) =>
      GrandParent_Parent_Child.fromRef(T, S, U, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($GrandParent_Parent_ChildType, T, S, U);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $GrandParent_Parent_ChildType &&
        other is $GrandParent_Parent_ChildType &&
        T == other.T &&
        S == other.S &&
        U == other.U;
  }
}

/// from: com.github.dart_lang.jnigen.generics.GrandParent$StaticParent
class GrandParent_StaticParent<$S extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType $type = type(S);

  final jni.JObjType<$S> S;

  GrandParent_StaticParent.fromRef(
    this.S,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(
      r"com/github/dart_lang/jnigen/generics/GrandParent$StaticParent");

  /// The type which includes information such as the signature of this class.
  static $GrandParent_StaticParentType<$S> type<$S extends jni.JObject>(
    jni.JObjType<$S> S,
  ) {
    return $GrandParent_StaticParentType(
      S,
    );
  }

  static final _id_value = jniAccessors.getFieldIDOf(
    _classRef,
    r"value",
    r"Ljava/lang/Object;",
  );

  /// from: public S value
  /// The returned object must be deleted after use, by calling the `delete` method.
  $S get value => S.fromRef(jniAccessors
      .getField(reference, _id_value, jni.JniCallType.objectType)
      .object);

  /// from: public S value
  /// The returned object must be deleted after use, by calling the `delete` method.
  set value($S value) =>
      jniEnv.SetObjectField(reference, _id_value, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/Object;)V");

  /// from: public void <init>(S value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory GrandParent_StaticParent(
    $S value, {
    jni.JObjType<$S>? S,
  }) {
    S ??= jni.lowestCommonSuperType([
      value.$type,
    ]) as jni.JObjType<$S>;
    return GrandParent_StaticParent.fromRef(
        S,
        jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [value.reference]).object);
  }
}

class $GrandParent_StaticParentType<$S extends jni.JObject>
    extends jni.JObjType<GrandParent_StaticParent<$S>> {
  final jni.JObjType<$S> S;

  const $GrandParent_StaticParentType(
    this.S,
  );

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/generics/GrandParent$StaticParent;";

  @override
  GrandParent_StaticParent<$S> fromRef(jni.JObjectPtr ref) =>
      GrandParent_StaticParent.fromRef(S, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($GrandParent_StaticParentType, S);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $GrandParent_StaticParentType &&
        other is $GrandParent_StaticParentType &&
        S == other.S;
  }
}

/// from: com.github.dart_lang.jnigen.generics.GrandParent$StaticParent$Child
class GrandParent_StaticParent_Child<$S extends jni.JObject,
    $U extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType $type = type(S, U);

  final jni.JObjType<$S> S;
  final jni.JObjType<$U> U;

  GrandParent_StaticParent_Child.fromRef(
    this.S,
    this.U,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(
      r"com/github/dart_lang/jnigen/generics/GrandParent$StaticParent$Child");

  /// The type which includes information such as the signature of this class.
  static $GrandParent_StaticParent_ChildType<$S, $U>
      type<$S extends jni.JObject, $U extends jni.JObject>(
    jni.JObjType<$S> S,
    jni.JObjType<$U> U,
  ) {
    return $GrandParent_StaticParent_ChildType(
      S,
      U,
    );
  }

  static final _id_parentValue = jniAccessors.getFieldIDOf(
    _classRef,
    r"parentValue",
    r"Ljava/lang/Object;",
  );

  /// from: public S parentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  $S get parentValue => S.fromRef(jniAccessors
      .getField(reference, _id_parentValue, jni.JniCallType.objectType)
      .object);

  /// from: public S parentValue
  /// The returned object must be deleted after use, by calling the `delete` method.
  set parentValue($S value) =>
      jniEnv.SetObjectField(reference, _id_parentValue, value.reference);

  static final _id_value = jniAccessors.getFieldIDOf(
    _classRef,
    r"value",
    r"Ljava/lang/Object;",
  );

  /// from: public U value
  /// The returned object must be deleted after use, by calling the `delete` method.
  $U get value => U.fromRef(jniAccessors
      .getField(reference, _id_value, jni.JniCallType.objectType)
      .object);

  /// from: public U value
  /// The returned object must be deleted after use, by calling the `delete` method.
  set value($U value) =>
      jniEnv.SetObjectField(reference, _id_value, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/Object;Ljava/lang/Object;)V");

  /// from: public void <init>(S parentValue, U value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory GrandParent_StaticParent_Child(
    $S parentValue,
    $U value, {
    jni.JObjType<$S>? S,
    jni.JObjType<$U>? U,
  }) {
    S ??= jni.lowestCommonSuperType([
      parentValue.$type,
    ]) as jni.JObjType<$S>;
    U ??= jni.lowestCommonSuperType([
      value.$type,
    ]) as jni.JObjType<$U>;
    return GrandParent_StaticParent_Child.fromRef(
        S,
        U,
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [parentValue.reference, value.reference]).object);
  }
}

class $GrandParent_StaticParent_ChildType<$S extends jni.JObject,
        $U extends jni.JObject>
    extends jni.JObjType<GrandParent_StaticParent_Child<$S, $U>> {
  final jni.JObjType<$S> S;
  final jni.JObjType<$U> U;

  const $GrandParent_StaticParent_ChildType(
    this.S,
    this.U,
  );

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/generics/GrandParent$StaticParent$Child;";

  @override
  GrandParent_StaticParent_Child<$S, $U> fromRef(jni.JObjectPtr ref) =>
      GrandParent_StaticParent_Child.fromRef(S, U, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($GrandParent_StaticParent_ChildType, S, U);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $GrandParent_StaticParent_ChildType &&
        other is $GrandParent_StaticParent_ChildType &&
        S == other.S &&
        U == other.U;
  }
}

/// from: com.github.dart_lang.jnigen.generics.MyMap
class MyMap<$K extends jni.JObject, $V extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType $type = type(K, V);

  final jni.JObjType<$K> K;
  final jni.JObjType<$V> V;

  MyMap.fromRef(
    this.K,
    this.V,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"com/github/dart_lang/jnigen/generics/MyMap");

  /// The type which includes information such as the signature of this class.
  static $MyMapType<$K, $V>
      type<$K extends jni.JObject, $V extends jni.JObject>(
    jni.JObjType<$K> K,
    jni.JObjType<$V> V,
  ) {
    return $MyMapType(
      K,
      V,
    );
  }

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory MyMap({
    required jni.JObjType<$K> K,
    required jni.JObjType<$V> V,
  }) {
    return MyMap.fromRef(
        K, V, jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, r"get", r"(Ljava/lang/Object;)Ljava/lang/Object;");

  /// from: public V get(K key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  $V get0(
    $K key,
  ) {
    return V.fromRef(jniAccessors.callMethodWithArgs(reference, _id_get0,
        jni.JniCallType.objectType, [key.reference]).object);
  }

  static final _id_put = jniAccessors.getMethodIDOf(_classRef, r"put",
      r"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

  /// from: public V put(K key, V value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  $V put(
    $K key,
    $V value,
  ) {
    return V.fromRef(jniAccessors.callMethodWithArgs(reference, _id_put,
        jni.JniCallType.objectType, [key.reference, value.reference]).object);
  }

  static final _id_entryStack = jniAccessors.getMethodIDOf(_classRef,
      r"entryStack", r"()Lcom/github/dart_lang/jnigen/generics/MyStack;");

  /// from: public com.github.dart_lang.jnigen.generics.MyStack<com.github.dart_lang.jnigen.generics.MyMap<K,V>.MyEntry> entryStack()
  /// The returned object must be deleted after use, by calling the `delete` method.
  MyStack<MyMap_MyEntry<jni.JObject, jni.JObject>> entryStack() {
    return const $MyStackType(
            $MyMap_MyEntryType(jni.JObjectType(), jni.JObjectType()))
        .fromRef(jniAccessors.callMethodWithArgs(
            reference, _id_entryStack, jni.JniCallType.objectType, []).object);
  }
}

class $MyMapType<$K extends jni.JObject, $V extends jni.JObject>
    extends jni.JObjType<MyMap<$K, $V>> {
  final jni.JObjType<$K> K;
  final jni.JObjType<$V> V;

  const $MyMapType(
    this.K,
    this.V,
  );

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/generics/MyMap;";

  @override
  MyMap<$K, $V> fromRef(jni.JObjectPtr ref) => MyMap.fromRef(K, V, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($MyMapType, K, V);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $MyMapType &&
        other is $MyMapType &&
        K == other.K &&
        V == other.V;
  }
}

/// from: com.github.dart_lang.jnigen.generics.MyMap$MyEntry
class MyMap_MyEntry<$K extends jni.JObject, $V extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType $type = type(K, V);

  final jni.JObjType<$K> K;
  final jni.JObjType<$V> V;

  MyMap_MyEntry.fromRef(
    this.K,
    this.V,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/generics/MyMap$MyEntry");

  /// The type which includes information such as the signature of this class.
  static $MyMap_MyEntryType<$K, $V>
      type<$K extends jni.JObject, $V extends jni.JObject>(
    jni.JObjType<$K> K,
    jni.JObjType<$V> V,
  ) {
    return $MyMap_MyEntryType(
      K,
      V,
    );
  }

  static final _id_key = jniAccessors.getFieldIDOf(
    _classRef,
    r"key",
    r"Ljava/lang/Object;",
  );

  /// from: public K key
  /// The returned object must be deleted after use, by calling the `delete` method.
  $K get key => K.fromRef(jniAccessors
      .getField(reference, _id_key, jni.JniCallType.objectType)
      .object);

  /// from: public K key
  /// The returned object must be deleted after use, by calling the `delete` method.
  set key($K value) =>
      jniEnv.SetObjectField(reference, _id_key, value.reference);

  static final _id_value = jniAccessors.getFieldIDOf(
    _classRef,
    r"value",
    r"Ljava/lang/Object;",
  );

  /// from: public V value
  /// The returned object must be deleted after use, by calling the `delete` method.
  $V get value => V.fromRef(jniAccessors
      .getField(reference, _id_value, jni.JniCallType.objectType)
      .object);

  /// from: public V value
  /// The returned object must be deleted after use, by calling the `delete` method.
  set value($V value) =>
      jniEnv.SetObjectField(reference, _id_value, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/Object;Ljava/lang/Object;)V");

  /// from: public void <init>(K key, V value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory MyMap_MyEntry(
    $K key,
    $V value, {
    jni.JObjType<$K>? K,
    jni.JObjType<$V>? V,
  }) {
    K ??= jni.lowestCommonSuperType([
      key.$type,
    ]) as jni.JObjType<$K>;
    V ??= jni.lowestCommonSuperType([
      value.$type,
    ]) as jni.JObjType<$V>;
    return MyMap_MyEntry.fromRef(
        K,
        V,
        jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [key.reference, value.reference]).object);
  }
}

class $MyMap_MyEntryType<$K extends jni.JObject, $V extends jni.JObject>
    extends jni.JObjType<MyMap_MyEntry<$K, $V>> {
  final jni.JObjType<$K> K;
  final jni.JObjType<$V> V;

  const $MyMap_MyEntryType(
    this.K,
    this.V,
  );

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/generics/MyMap$MyEntry;";

  @override
  MyMap_MyEntry<$K, $V> fromRef(jni.JObjectPtr ref) =>
      MyMap_MyEntry.fromRef(K, V, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($MyMap_MyEntryType, K, V);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $MyMap_MyEntryType &&
        other is $MyMap_MyEntryType &&
        K == other.K &&
        V == other.V;
  }
}

/// from: com.github.dart_lang.jnigen.generics.MyStack
class MyStack<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType $type = type(T);

  final jni.JObjType<$T> T;

  MyStack.fromRef(
    this.T,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"com/github/dart_lang/jnigen/generics/MyStack");

  /// The type which includes information such as the signature of this class.
  static $MyStackType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $MyStackType(
      T,
    );
  }

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory MyStack({
    required jni.JObjType<$T> T,
  }) {
    return MyStack.fromRef(
        T, jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }

  static final _id_fromArray = jniAccessors.getStaticMethodIDOf(
      _classRef,
      r"fromArray",
      r"([Ljava/lang/Object;)Lcom/github/dart_lang/jnigen/generics/MyStack;");

  /// from: static public com.github.dart_lang.jnigen.generics.MyStack<T> fromArray(T[] arr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MyStack<$T> fromArray<$T extends jni.JObject>(
    jni.JArray<$T> arr, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      ((arr.$type as jni.JArrayType).elementType as jni.JObjType),
    ]) as jni.JObjType<$T>;
    return $MyStackType(T).fromRef(jniAccessors.callStaticMethodWithArgs(
        _classRef,
        _id_fromArray,
        jni.JniCallType.objectType,
        [arr.reference]).object);
  }

  static final _id_fromArrayOfArrayOfGrandParents =
      jniAccessors.getStaticMethodIDOf(
          _classRef,
          r"fromArrayOfArrayOfGrandParents",
          r"([[Lcom/github/dart_lang/jnigen/generics/GrandParent;)Lcom/github/dart_lang/jnigen/generics/MyStack;");

  /// from: static public com.github.dart_lang.jnigen.generics.MyStack<S> fromArrayOfArrayOfGrandParents(com.github.dart_lang.jnigen.generics.GrandParent<S>[][] arr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MyStack<$S> fromArrayOfArrayOfGrandParents<$S extends jni.JObject>(
    jni.JArray<jni.JArray<GrandParent<$S>>> arr, {
    jni.JObjType<$S>? S,
  }) {
    S ??= jni.lowestCommonSuperType([
      (((((arr.$type as jni.JArrayType).elementType as jni.JObjType)
                  as jni.JArrayType)
              .elementType as jni.JObjType) as $GrandParentType)
          .T,
    ]) as jni.JObjType<$S>;
    return $MyStackType(S).fromRef(jniAccessors.callStaticMethodWithArgs(
        _classRef,
        _id_fromArrayOfArrayOfGrandParents,
        jni.JniCallType.objectType,
        [arr.reference]).object);
  }

  static final _id_of = jniAccessors.getStaticMethodIDOf(
      _classRef, r"of", r"()Lcom/github/dart_lang/jnigen/generics/MyStack;");

  /// from: static public com.github.dart_lang.jnigen.generics.MyStack<T> of()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MyStack<$T> of<$T extends jni.JObject>({
    required jni.JObjType<$T> T,
  }) {
    return $MyStackType(T).fromRef(jniAccessors.callStaticMethodWithArgs(
        _classRef, _id_of, jni.JniCallType.objectType, []).object);
  }

  static final _id_of1 = jniAccessors.getStaticMethodIDOf(_classRef, r"of",
      r"(Ljava/lang/Object;)Lcom/github/dart_lang/jnigen/generics/MyStack;");

  /// from: static public com.github.dart_lang.jnigen.generics.MyStack<T> of(T obj)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MyStack<$T> of1<$T extends jni.JObject>(
    $T obj, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      obj.$type,
    ]) as jni.JObjType<$T>;
    return $MyStackType(T).fromRef(jniAccessors.callStaticMethodWithArgs(
        _classRef,
        _id_of1,
        jni.JniCallType.objectType,
        [obj.reference]).object);
  }

  static final _id_of2 = jniAccessors.getStaticMethodIDOf(_classRef, r"of",
      r"(Ljava/lang/Object;Ljava/lang/Object;)Lcom/github/dart_lang/jnigen/generics/MyStack;");

  /// from: static public com.github.dart_lang.jnigen.generics.MyStack<T> of(T obj, T obj2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static MyStack<$T> of2<$T extends jni.JObject>(
    $T obj,
    $T obj2, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      obj2.$type,
      obj.$type,
    ]) as jni.JObjType<$T>;
    return $MyStackType(T).fromRef(jniAccessors.callStaticMethodWithArgs(
        _classRef,
        _id_of2,
        jni.JniCallType.objectType,
        [obj.reference, obj2.reference]).object);
  }

  static final _id_push =
      jniAccessors.getMethodIDOf(_classRef, r"push", r"(Ljava/lang/Object;)V");

  /// from: public void push(T item)
  void push(
    $T item,
  ) {
    return jniAccessors.callMethodWithArgs(reference, _id_push,
        jni.JniCallType.voidType, [item.reference]).check();
  }

  static final _id_pop =
      jniAccessors.getMethodIDOf(_classRef, r"pop", r"()Ljava/lang/Object;");

  /// from: public T pop()
  /// The returned object must be deleted after use, by calling the `delete` method.
  $T pop() {
    return T.fromRef(jniAccessors.callMethodWithArgs(
        reference, _id_pop, jni.JniCallType.objectType, []).object);
  }

  static final _id_size =
      jniAccessors.getMethodIDOf(_classRef, r"size", r"()I");

  /// from: public int size()
  int size() {
    return jniAccessors.callMethodWithArgs(
        reference, _id_size, jni.JniCallType.intType, []).integer;
  }
}

class $MyStackType<$T extends jni.JObject> extends jni.JObjType<MyStack<$T>> {
  final jni.JObjType<$T> T;

  const $MyStackType(
    this.T,
  );

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/generics/MyStack;";

  @override
  MyStack<$T> fromRef(jni.JObjectPtr ref) => MyStack.fromRef(T, ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($MyStackType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $MyStackType &&
        other is $MyStackType &&
        T == other.T;
  }
}

/// from: com.github.dart_lang.jnigen.generics.StringKeyedMap
class StringKeyedMap<$V extends jni.JObject> extends MyMap<jni.JString, $V> {
  @override
  late final jni.JObjType $type = type(V);

  final jni.JObjType<$V> V;

  StringKeyedMap.fromRef(
    this.V,
    jni.JObjectPtr ref,
  ) : super.fromRef(const jni.JStringType(), V, ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/generics/StringKeyedMap");

  /// The type which includes information such as the signature of this class.
  static $StringKeyedMapType<$V> type<$V extends jni.JObject>(
    jni.JObjType<$V> V,
  ) {
    return $StringKeyedMapType(
      V,
    );
  }

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory StringKeyedMap({
    required jni.JObjType<$V> V,
  }) {
    return StringKeyedMap.fromRef(
        V, jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }
}

class $StringKeyedMapType<$V extends jni.JObject>
    extends jni.JObjType<StringKeyedMap<$V>> {
  final jni.JObjType<$V> V;

  const $StringKeyedMapType(
    this.V,
  );

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/generics/StringKeyedMap;";

  @override
  StringKeyedMap<$V> fromRef(jni.JObjectPtr ref) =>
      StringKeyedMap.fromRef(V, ref);

  @override
  jni.JObjType get superType => $MyMapType(const jni.JStringType(), V);

  @override
  final superCount = 2;

  @override
  int get hashCode => Object.hash($StringKeyedMapType, V);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $StringKeyedMapType &&
        other is $StringKeyedMapType &&
        V == other.V;
  }
}

/// from: com.github.dart_lang.jnigen.generics.StringMap
class StringMap extends StringKeyedMap<jni.JString> {
  @override
  late final jni.JObjType $type = type;

  StringMap.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(const jni.JStringType(), ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/generics/StringMap");

  /// The type which includes information such as the signature of this class.
  static const type = $StringMapType();
  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory StringMap() {
    return StringMap.fromRef(
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }
}

class $StringMapType extends jni.JObjType<StringMap> {
  const $StringMapType();

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/generics/StringMap;";

  @override
  StringMap fromRef(jni.JObjectPtr ref) => StringMap.fromRef(ref);

  @override
  jni.JObjType get superType => const $StringKeyedMapType(jni.JStringType());

  @override
  final superCount = 3;

  @override
  int get hashCode => ($StringMapType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $StringMapType && other is $StringMapType;
  }
}

/// from: com.github.dart_lang.jnigen.generics.StringStack
class StringStack extends MyStack<jni.JString> {
  @override
  late final jni.JObjType $type = type;

  StringStack.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(const jni.JStringType(), ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/generics/StringStack");

  /// The type which includes information such as the signature of this class.
  static const type = $StringStackType();
  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory StringStack() {
    return StringStack.fromRef(
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }
}

class $StringStackType extends jni.JObjType<StringStack> {
  const $StringStackType();

  @override
  String get signature => r"Lcom/github/dart_lang/jnigen/generics/StringStack;";

  @override
  StringStack fromRef(jni.JObjectPtr ref) => StringStack.fromRef(ref);

  @override
  jni.JObjType get superType => const $MyStackType(jni.JStringType());

  @override
  final superCount = 2;

  @override
  int get hashCode => ($StringStackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $StringStackType && other is $StringStackType;
  }
}

/// from: com.github.dart_lang.jnigen.generics.StringValuedMap
class StringValuedMap<$K extends jni.JObject> extends MyMap<$K, jni.JString> {
  @override
  late final jni.JObjType $type = type(K);

  final jni.JObjType<$K> K;

  StringValuedMap.fromRef(
    this.K,
    jni.JObjectPtr ref,
  ) : super.fromRef(K, const jni.JStringType(), ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/generics/StringValuedMap");

  /// The type which includes information such as the signature of this class.
  static $StringValuedMapType<$K> type<$K extends jni.JObject>(
    jni.JObjType<$K> K,
  ) {
    return $StringValuedMapType(
      K,
    );
  }

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory StringValuedMap({
    required jni.JObjType<$K> K,
  }) {
    return StringValuedMap.fromRef(
        K, jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }
}

class $StringValuedMapType<$K extends jni.JObject>
    extends jni.JObjType<StringValuedMap<$K>> {
  final jni.JObjType<$K> K;

  const $StringValuedMapType(
    this.K,
  );

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/generics/StringValuedMap;";

  @override
  StringValuedMap<$K> fromRef(jni.JObjectPtr ref) =>
      StringValuedMap.fromRef(K, ref);

  @override
  jni.JObjType get superType => $MyMapType(K, const jni.JStringType());

  @override
  final superCount = 2;

  @override
  int get hashCode => Object.hash($StringValuedMapType, K);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $StringValuedMapType &&
        other is $StringValuedMapType &&
        K == other.K;
  }
}

/// from: com.github.dart_lang.jnigen.annotations.JsonSerializable$Case
class JsonSerializable_Case extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  JsonSerializable_Case.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(
      r"com/github/dart_lang/jnigen/annotations/JsonSerializable$Case");

  /// The type which includes information such as the signature of this class.
  static const type = $JsonSerializable_CaseType();
  static final _id_values = jniAccessors.getStaticMethodIDOf(
      _classRef,
      r"values",
      r"()[Lcom/github/dart_lang/jnigen/annotations/JsonSerializable$Case;");

  /// from: static public com.github.dart_lang.jnigen.annotations.JsonSerializable.Case[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JArray<JsonSerializable_Case> values() {
    return const jni.JArrayType($JsonSerializable_CaseType()).fromRef(
        jniAccessors.callStaticMethodWithArgs(
            _classRef, _id_values, jni.JniCallType.objectType, []).object);
  }

  static final _id_valueOf = jniAccessors.getStaticMethodIDOf(
      _classRef,
      r"valueOf",
      r"(Ljava/lang/String;)Lcom/github/dart_lang/jnigen/annotations/JsonSerializable$Case;");

  /// from: static public com.github.dart_lang.jnigen.annotations.JsonSerializable.Case valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static JsonSerializable_Case valueOf(
    jni.JString name,
  ) {
    return const $JsonSerializable_CaseType().fromRef(jniAccessors
        .callStaticMethodWithArgs(_classRef, _id_valueOf,
            jni.JniCallType.objectType, [name.reference]).object);
  }
}

class $JsonSerializable_CaseType extends jni.JObjType<JsonSerializable_Case> {
  const $JsonSerializable_CaseType();

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/annotations/JsonSerializable$Case;";

  @override
  JsonSerializable_Case fromRef(jni.JObjectPtr ref) =>
      JsonSerializable_Case.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($JsonSerializable_CaseType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $JsonSerializable_CaseType &&
        other is $JsonSerializable_CaseType;
  }
}

/// from: com.github.dart_lang.jnigen.annotations.MyDataClass
class MyDataClass extends jni.JObject {
  @override
  late final jni.JObjType $type = type;

  MyDataClass.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors
      .getClassOf(r"com/github/dart_lang/jnigen/annotations/MyDataClass");

  /// The type which includes information such as the signature of this class.
  static const type = $MyDataClassType();
  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory MyDataClass() {
    return MyDataClass.fromRef(
        jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);
  }
}

class $MyDataClassType extends jni.JObjType<MyDataClass> {
  const $MyDataClassType();

  @override
  String get signature =>
      r"Lcom/github/dart_lang/jnigen/annotations/MyDataClass;";

  @override
  MyDataClass fromRef(jni.JObjectPtr ref) => MyDataClass.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($MyDataClassType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == $MyDataClassType && other is $MyDataClassType;
  }
}
