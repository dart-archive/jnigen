name: jni
description: Library to access JNI from dart and flutter
version: 0.0.1
homepage: https://github.com/dart-lang/jnigen

environment:
  sdk: ">=2.17.1 <3.0.0"
  #flutter: ">=2.11.0"

dependencies:
  ## Commented out to support dart standalone
  # flutter:
    #  sdk: flutter
  plugin_platform_interface: ^2.0.2
  ffi:
  path:

dev_dependencies:
  ## Temporarily linking to a personal fork of ffigen
  ## so that changes in FFIGen can be reviewed.
  #
  ## If this is vendored directly, it will not be possible to
  ## review changes in ffigen.
  #
  ## Will be removed in a later PR by vendoring the patched ffigen.
  #
  ## After running `dart run ffigen --config ffigen.yaml` there
  ## should be no changes.
  ffigen:
    git: https://github.com/mahesh-hegde/ffigen_patch_jni.git
    #path: third_party/ffigen_patch
  flutter_test:
    sdk: flutter
  flutter_lints: ^2.0.0
  test: ^1.21.1

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # This section identifies this Flutter project as a plugin project.
  # The 'pluginClass' specifies the class (in Java, Kotlin, Swift, Objective-C, etc.)
  # which should be registered in the plugin registry. This is required for
  # using method channels.
  # The Android 'package' specifies package in which the registered class is.
  # This is required for using method channels on Android.
  # The 'ffiPlugin' specifies that native code should be built and bundled.
  # This is required for using `dart:ffi`.
  # All these are used by the tooling to maintain consistency when
  # adding or updating assets for this project.
  #
  # Please refer to README.md for a detailed explanation.
  plugin:
    platforms:
      linux:
        ffiPlugin: true
      windows:
        ffiPlugin: true
      macos:
        ffiPlugin: true
      android:
        ffiPlugin: true
        package: dev.dart.jni
        pluginClass: JniPlugin # Android needs special plugin to initialize JNI on startup

  # To add assets to your plugin package, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg
  #
  # For details regarding assets in packages, see
  # https://flutter.dev/assets-and-images/#from-packages
  #
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # To add custom fonts to your plugin package, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts in packages, see
  # https://flutter.dev/custom-fonts/#from-packages
