// Autogenerated; DO NOT EDIT
// Generated by running the script in tool/gen_aux_methods.dart
part of 'jni.dart';

extension JniInvokeMethods on Jni {
  String invokeStringMethod(String className, String methodName,
      String signature, List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticObjectMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    arena.releaseAll();
    final str = env.asDartString(result);
    env.DeleteLocalRef(result);
    env.DeleteLocalRef(cls);
    return str;
  }

  String retrieveStringField(
      String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticObjectField(cls, fieldID);
    env.checkException();
    arena.releaseAll();
    final str = env.asDartString(result);
    env.DeleteLocalRef(result);
    env.DeleteLocalRef(cls);
    return str;
  }

  JniObject invokeObjectMethod(String className, String methodName,
      String signature, List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticObjectMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    arena.releaseAll();
    return JniObject.of(env, result, nullptr);
  }

  JniObject retrieveObjectField(
      String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticObjectField(cls, fieldID);
    env.checkException();
    arena.releaseAll();
    return JniObject.of(env, result, nullptr);
  }

  bool invokeBooleanMethod(String className, String methodName,
      String signature, List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticBooleanMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result != 0;
  }

  bool retrieveBooleanField(
      String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticBooleanField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result != 0;
  }

  int invokeByteMethod(String className, String methodName, String signature,
      List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticByteMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int retrieveByteField(String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticByteField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int invokeCharMethod(String className, String methodName, String signature,
      List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticCharMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int retrieveCharField(String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticCharField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int invokeShortMethod(String className, String methodName, String signature,
      List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticShortMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int retrieveShortField(String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticShortField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int invokeIntMethod(String className, String methodName, String signature,
      List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticIntMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int retrieveIntField(String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticIntField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int invokeLongMethod(String className, String methodName, String signature,
      List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticLongMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  int retrieveLongField(String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticLongField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  double invokeFloatMethod(String className, String methodName,
      String signature, List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticFloatMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  double retrieveFloatField(
      String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticFloatField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  double invokeDoubleMethod(String className, String methodName,
      String signature, List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticDoubleMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  double retrieveDoubleField(
      String className, String fieldName, String signature) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final fieldNameChars = fieldName.toNativeChars(arena);
    final signatueChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final fieldID = env.GetStaticFieldID(cls, fieldNameChars, signatueChars);
    if (fieldID == nullptr) {
      env.checkException();
    }
    final result = env.GetStaticDoubleField(cls, fieldID);
    env.checkException();
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }

  void invokeVoidMethod(String className, String methodName, String signature,
      List<dynamic> args) {
    final arena = Arena();
    final env = getEnv();
    final classNameChars = className.toNativeChars(arena);
    final methodNameChars = methodName.toNativeChars(arena);
    final signatureChars = signature.toNativeChars(arena);
    final cls = _bindings.LoadClass(classNameChars);
    if (cls == nullptr) {
      env.checkException();
    }
    final methodID =
        env.GetStaticMethodID(cls, methodNameChars, signatureChars);
    if (methodID == nullptr) {
      env.checkException();
    }
    final jvArgs = JValueArgs(args, env, arena);
    final result = env.CallStaticVoidMethodA(cls, methodID, jvArgs.values);
    env.checkException();
    jvArgs.disposeIn(env);
    env.DeleteLocalRef(cls);
    arena.releaseAll();
    return result;
  }
}
